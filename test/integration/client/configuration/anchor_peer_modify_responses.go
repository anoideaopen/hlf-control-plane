// Code generated by go-swagger; DO NOT EDIT.

package configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/atomyze-foundation/hlf-control-plane/test/integration/models"
)

// AnchorPeerModifyReader is a Reader for the AnchorPeerModify structure.
type AnchorPeerModifyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AnchorPeerModifyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAnchorPeerModifyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewAnchorPeerModifyInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewAnchorPeerModifyDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAnchorPeerModifyOK creates a AnchorPeerModifyOK with default headers values
func NewAnchorPeerModifyOK() *AnchorPeerModifyOK {
	return &AnchorPeerModifyOK{}
}

/*
AnchorPeerModifyOK describes a response with status code 200, with default header values.

A successful response.
*/
type AnchorPeerModifyOK struct {
	Payload *models.ProtoConfigAnchorModifyResponse
}

// IsSuccess returns true when this anchor peer modify o k response has a 2xx status code
func (o *AnchorPeerModifyOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this anchor peer modify o k response has a 3xx status code
func (o *AnchorPeerModifyOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this anchor peer modify o k response has a 4xx status code
func (o *AnchorPeerModifyOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this anchor peer modify o k response has a 5xx status code
func (o *AnchorPeerModifyOK) IsServerError() bool {
	return false
}

// IsCode returns true when this anchor peer modify o k response a status code equal to that given
func (o *AnchorPeerModifyOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the anchor peer modify o k response
func (o *AnchorPeerModifyOK) Code() int {
	return 200
}

func (o *AnchorPeerModifyOK) Error() string {
	return fmt.Sprintf("[PUT /v1/config/{channelName}/anchor][%d] anchorPeerModifyOK  %+v", 200, o.Payload)
}

func (o *AnchorPeerModifyOK) String() string {
	return fmt.Sprintf("[PUT /v1/config/{channelName}/anchor][%d] anchorPeerModifyOK  %+v", 200, o.Payload)
}

func (o *AnchorPeerModifyOK) GetPayload() *models.ProtoConfigAnchorModifyResponse {
	return o.Payload
}

func (o *AnchorPeerModifyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProtoConfigAnchorModifyResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAnchorPeerModifyInternalServerError creates a AnchorPeerModifyInternalServerError with default headers values
func NewAnchorPeerModifyInternalServerError() *AnchorPeerModifyInternalServerError {
	return &AnchorPeerModifyInternalServerError{}
}

/*
AnchorPeerModifyInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type AnchorPeerModifyInternalServerError struct {
	Payload *models.ProtoErrorResponse
}

// IsSuccess returns true when this anchor peer modify internal server error response has a 2xx status code
func (o *AnchorPeerModifyInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this anchor peer modify internal server error response has a 3xx status code
func (o *AnchorPeerModifyInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this anchor peer modify internal server error response has a 4xx status code
func (o *AnchorPeerModifyInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this anchor peer modify internal server error response has a 5xx status code
func (o *AnchorPeerModifyInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this anchor peer modify internal server error response a status code equal to that given
func (o *AnchorPeerModifyInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the anchor peer modify internal server error response
func (o *AnchorPeerModifyInternalServerError) Code() int {
	return 500
}

func (o *AnchorPeerModifyInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /v1/config/{channelName}/anchor][%d] anchorPeerModifyInternalServerError  %+v", 500, o.Payload)
}

func (o *AnchorPeerModifyInternalServerError) String() string {
	return fmt.Sprintf("[PUT /v1/config/{channelName}/anchor][%d] anchorPeerModifyInternalServerError  %+v", 500, o.Payload)
}

func (o *AnchorPeerModifyInternalServerError) GetPayload() *models.ProtoErrorResponse {
	return o.Payload
}

func (o *AnchorPeerModifyInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProtoErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAnchorPeerModifyDefault creates a AnchorPeerModifyDefault with default headers values
func NewAnchorPeerModifyDefault(code int) *AnchorPeerModifyDefault {
	return &AnchorPeerModifyDefault{
		_statusCode: code,
	}
}

/*
AnchorPeerModifyDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type AnchorPeerModifyDefault struct {
	_statusCode int

	Payload *models.RPCStatus
}

// IsSuccess returns true when this anchor peer modify default response has a 2xx status code
func (o *AnchorPeerModifyDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this anchor peer modify default response has a 3xx status code
func (o *AnchorPeerModifyDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this anchor peer modify default response has a 4xx status code
func (o *AnchorPeerModifyDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this anchor peer modify default response has a 5xx status code
func (o *AnchorPeerModifyDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this anchor peer modify default response a status code equal to that given
func (o *AnchorPeerModifyDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the anchor peer modify default response
func (o *AnchorPeerModifyDefault) Code() int {
	return o._statusCode
}

func (o *AnchorPeerModifyDefault) Error() string {
	return fmt.Sprintf("[PUT /v1/config/{channelName}/anchor][%d] anchorPeerModify default  %+v", o._statusCode, o.Payload)
}

func (o *AnchorPeerModifyDefault) String() string {
	return fmt.Sprintf("[PUT /v1/config/{channelName}/anchor][%d] anchorPeerModify default  %+v", o._statusCode, o.Payload)
}

func (o *AnchorPeerModifyDefault) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *AnchorPeerModifyDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
AnchorPeerModifyBody ConfigAnchorModifyRequest
//
// Configuration anchor list request
swagger:model AnchorPeerModifyBody
*/
type AnchorPeerModifyBody struct {

	// orderer
	Orderer *models.ProtoOrderer `json:"orderer,omitempty"`

	// peers
	// Required: true
	Peers []*models.ProtosAnchorPeer `json:"peers"`
}

// Validate validates this anchor peer modify body
func (o *AnchorPeerModifyBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOrderer(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePeers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AnchorPeerModifyBody) validateOrderer(formats strfmt.Registry) error {
	if swag.IsZero(o.Orderer) { // not required
		return nil
	}

	if o.Orderer != nil {
		if err := o.Orderer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "orderer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "orderer")
			}
			return err
		}
	}

	return nil
}

func (o *AnchorPeerModifyBody) validatePeers(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"peers", "body", o.Peers); err != nil {
		return err
	}

	for i := 0; i < len(o.Peers); i++ {
		if swag.IsZero(o.Peers[i]) { // not required
			continue
		}

		if o.Peers[i] != nil {
			if err := o.Peers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "peers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "peers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this anchor peer modify body based on the context it is used
func (o *AnchorPeerModifyBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateOrderer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePeers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *AnchorPeerModifyBody) contextValidateOrderer(ctx context.Context, formats strfmt.Registry) error {

	if o.Orderer != nil {

		if swag.IsZero(o.Orderer) { // not required
			return nil
		}

		if err := o.Orderer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "orderer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "orderer")
			}
			return err
		}
	}

	return nil
}

func (o *AnchorPeerModifyBody) contextValidatePeers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Peers); i++ {

		if o.Peers[i] != nil {

			if swag.IsZero(o.Peers[i]) { // not required
				return nil
			}

			if err := o.Peers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "peers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "peers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *AnchorPeerModifyBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AnchorPeerModifyBody) UnmarshalBinary(b []byte) error {
	var res AnchorPeerModifyBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
