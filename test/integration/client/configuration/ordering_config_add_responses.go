// Code generated by go-swagger; DO NOT EDIT.

package configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/atomyze-foundation/hlf-control-plane/test/integration/models"
)

// OrderingConfigAddReader is a Reader for the OrderingConfigAdd structure.
type OrderingConfigAddReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *OrderingConfigAddReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewOrderingConfigAddOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewOrderingConfigAddInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewOrderingConfigAddDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewOrderingConfigAddOK creates a OrderingConfigAddOK with default headers values
func NewOrderingConfigAddOK() *OrderingConfigAddOK {
	return &OrderingConfigAddOK{}
}

/*
OrderingConfigAddOK describes a response with status code 200, with default header values.

A successful response.
*/
type OrderingConfigAddOK struct {
	Payload models.ProtoConfigOrderingAddResponse
}

// IsSuccess returns true when this ordering config add o k response has a 2xx status code
func (o *OrderingConfigAddOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this ordering config add o k response has a 3xx status code
func (o *OrderingConfigAddOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ordering config add o k response has a 4xx status code
func (o *OrderingConfigAddOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this ordering config add o k response has a 5xx status code
func (o *OrderingConfigAddOK) IsServerError() bool {
	return false
}

// IsCode returns true when this ordering config add o k response a status code equal to that given
func (o *OrderingConfigAddOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the ordering config add o k response
func (o *OrderingConfigAddOK) Code() int {
	return 200
}

func (o *OrderingConfigAddOK) Error() string {
	return fmt.Sprintf("[POST /v1/config/{channelName}/ordering][%d] orderingConfigAddOK  %+v", 200, o.Payload)
}

func (o *OrderingConfigAddOK) String() string {
	return fmt.Sprintf("[POST /v1/config/{channelName}/ordering][%d] orderingConfigAddOK  %+v", 200, o.Payload)
}

func (o *OrderingConfigAddOK) GetPayload() models.ProtoConfigOrderingAddResponse {
	return o.Payload
}

func (o *OrderingConfigAddOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOrderingConfigAddInternalServerError creates a OrderingConfigAddInternalServerError with default headers values
func NewOrderingConfigAddInternalServerError() *OrderingConfigAddInternalServerError {
	return &OrderingConfigAddInternalServerError{}
}

/*
OrderingConfigAddInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type OrderingConfigAddInternalServerError struct {
	Payload *models.ProtoErrorResponse
}

// IsSuccess returns true when this ordering config add internal server error response has a 2xx status code
func (o *OrderingConfigAddInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ordering config add internal server error response has a 3xx status code
func (o *OrderingConfigAddInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ordering config add internal server error response has a 4xx status code
func (o *OrderingConfigAddInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this ordering config add internal server error response has a 5xx status code
func (o *OrderingConfigAddInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this ordering config add internal server error response a status code equal to that given
func (o *OrderingConfigAddInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the ordering config add internal server error response
func (o *OrderingConfigAddInternalServerError) Code() int {
	return 500
}

func (o *OrderingConfigAddInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/config/{channelName}/ordering][%d] orderingConfigAddInternalServerError  %+v", 500, o.Payload)
}

func (o *OrderingConfigAddInternalServerError) String() string {
	return fmt.Sprintf("[POST /v1/config/{channelName}/ordering][%d] orderingConfigAddInternalServerError  %+v", 500, o.Payload)
}

func (o *OrderingConfigAddInternalServerError) GetPayload() *models.ProtoErrorResponse {
	return o.Payload
}

func (o *OrderingConfigAddInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProtoErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOrderingConfigAddDefault creates a OrderingConfigAddDefault with default headers values
func NewOrderingConfigAddDefault(code int) *OrderingConfigAddDefault {
	return &OrderingConfigAddDefault{
		_statusCode: code,
	}
}

/*
OrderingConfigAddDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type OrderingConfigAddDefault struct {
	_statusCode int

	Payload *models.RPCStatus
}

// IsSuccess returns true when this ordering config add default response has a 2xx status code
func (o *OrderingConfigAddDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this ordering config add default response has a 3xx status code
func (o *OrderingConfigAddDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this ordering config add default response has a 4xx status code
func (o *OrderingConfigAddDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this ordering config add default response has a 5xx status code
func (o *OrderingConfigAddDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this ordering config add default response a status code equal to that given
func (o *OrderingConfigAddDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the ordering config add default response
func (o *OrderingConfigAddDefault) Code() int {
	return o._statusCode
}

func (o *OrderingConfigAddDefault) Error() string {
	return fmt.Sprintf("[POST /v1/config/{channelName}/ordering][%d] orderingConfigAdd default  %+v", o._statusCode, o.Payload)
}

func (o *OrderingConfigAddDefault) String() string {
	return fmt.Sprintf("[POST /v1/config/{channelName}/ordering][%d] orderingConfigAdd default  %+v", o._statusCode, o.Payload)
}

func (o *OrderingConfigAddDefault) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *OrderingConfigAddDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
OrderingConfigAddBody ordering config add body
swagger:model OrderingConfigAddBody
*/
type OrderingConfigAddBody struct {

	// orderer
	Orderer *models.ProtoOrderer `json:"orderer,omitempty"`
}

// Validate validates this ordering config add body
func (o *OrderingConfigAddBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateOrderer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OrderingConfigAddBody) validateOrderer(formats strfmt.Registry) error {
	if swag.IsZero(o.Orderer) { // not required
		return nil
	}

	if o.Orderer != nil {
		if err := o.Orderer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "orderer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "orderer")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this ordering config add body based on the context it is used
func (o *OrderingConfigAddBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateOrderer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OrderingConfigAddBody) contextValidateOrderer(ctx context.Context, formats strfmt.Registry) error {

	if o.Orderer != nil {

		if swag.IsZero(o.Orderer) { // not required
			return nil
		}

		if err := o.Orderer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "orderer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "orderer")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *OrderingConfigAddBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OrderingConfigAddBody) UnmarshalBinary(b []byte) error {
	var res OrderingConfigAddBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
