// Code generated by go-swagger; DO NOT EDIT.

package configuration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new configuration API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for configuration API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AnchorPeerList(params *AnchorPeerListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AnchorPeerListOK, error)

	AnchorPeerModify(params *AnchorPeerModifyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AnchorPeerModifyOK, error)

	OrderingConfigAdd(params *OrderingConfigAddParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OrderingConfigAddOK, error)

	OrderingConfigDelete(params *OrderingConfigDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OrderingConfigDeleteOK, error)

	OrderingConfigUpdate(params *OrderingConfigUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OrderingConfigUpdateOK, error)

	OrderingGetConfig(params *OrderingGetConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OrderingGetConfigOK, error)

	SmartBftGet(params *SmartBftGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SmartBftGetOK, error)

	SmartBftSet(params *SmartBftSetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SmartBftSetOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
AnchorPeerList gets list of anchor peers on channel
*/
func (a *Client) AnchorPeerList(params *AnchorPeerListParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AnchorPeerListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAnchorPeerListParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "anchorPeerList",
		Method:             "GET",
		PathPattern:        "/v1/config/{channelName}/anchor",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AnchorPeerListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AnchorPeerListOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AnchorPeerListDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
AnchorPeerModify modifies list of anchor peers on channel
*/
func (a *Client) AnchorPeerModify(params *AnchorPeerModifyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AnchorPeerModifyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAnchorPeerModifyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "anchorPeerModify",
		Method:             "PUT",
		PathPattern:        "/v1/config/{channelName}/anchor",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AnchorPeerModifyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AnchorPeerModifyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*AnchorPeerModifyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
OrderingConfigAdd adds new orderer in channel
*/
func (a *Client) OrderingConfigAdd(params *OrderingConfigAddParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OrderingConfigAddOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrderingConfigAddParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "orderingConfigAdd",
		Method:             "POST",
		PathPattern:        "/v1/config/{channelName}/ordering",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OrderingConfigAddReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrderingConfigAddOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OrderingConfigAddDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
OrderingConfigDelete deletes orderer from channel
*/
func (a *Client) OrderingConfigDelete(params *OrderingConfigDeleteParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OrderingConfigDeleteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrderingConfigDeleteParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "orderingConfigDelete",
		Method:             "DELETE",
		PathPattern:        "/v1/config/{channelName}/ordering",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OrderingConfigDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrderingConfigDeleteOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OrderingConfigDeleteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
OrderingConfigUpdate updates current orderer in channel
*/
func (a *Client) OrderingConfigUpdate(params *OrderingConfigUpdateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OrderingConfigUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrderingConfigUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "orderingConfigUpdate",
		Method:             "PUT",
		PathPattern:        "/v1/config/{channelName}/ordering",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OrderingConfigUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrderingConfigUpdateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OrderingConfigUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
OrderingGetConfig gets ordering config of specified channel
*/
func (a *Client) OrderingGetConfig(params *OrderingGetConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*OrderingGetConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOrderingGetConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "orderingGetConfig",
		Method:             "GET",
		PathPattern:        "/v1/config/{channelName}/ordering",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &OrderingGetConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OrderingGetConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*OrderingGetConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SmartBftGet gets config smart b f t options
*/
func (a *Client) SmartBftGet(params *SmartBftGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SmartBftGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSmartBftGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "smartBftGet",
		Method:             "GET",
		PathPattern:        "/v1/config/{channelName}/smartbft",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SmartBftGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SmartBftGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SmartBftGetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SmartBftSet sets config smart b f t options
*/
func (a *Client) SmartBftSet(params *SmartBftSetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SmartBftSetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSmartBftSetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "smartBftSet",
		Method:             "POST",
		PathPattern:        "/v1/config/{channelName}/smartbft",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SmartBftSetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SmartBftSetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SmartBftSetDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
