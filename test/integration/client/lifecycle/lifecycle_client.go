// Code generated by go-swagger; DO NOT EDIT.

package lifecycle

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new lifecycle API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for lifecycle API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	LifecycleApproveForMyOrg(params *LifecycleApproveForMyOrgParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LifecycleApproveForMyOrgOK, error)

	LifecycleApproved(params *LifecycleApprovedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LifecycleApprovedOK, error)

	LifecycleCheckCommitReadiness(params *LifecycleCheckCommitReadinessParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LifecycleCheckCommitReadinessOK, error)

	LifecycleCommit(params *LifecycleCommitParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LifecycleCommitOK, error)

	LifecycleFull(params *LifecycleFullParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LifecycleFullOK, error)

	LifecycleInit(params *LifecycleInitParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LifecycleInitOK, error)

	LifecycleStatus(params *LifecycleStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LifecycleStatusOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
LifecycleApproveForMyOrg approves for my org chaincode on channel
*/
func (a *Client) LifecycleApproveForMyOrg(params *LifecycleApproveForMyOrgParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LifecycleApproveForMyOrgOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLifecycleApproveForMyOrgParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "lifecycleApproveForMyOrg",
		Method:             "POST",
		PathPattern:        "/v1/lifecycle/approve-for-my-org",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LifecycleApproveForMyOrgReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LifecycleApproveForMyOrgOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LifecycleApproveForMyOrgDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LifecycleApproved gets current approved definition of certain chaincode on channel
*/
func (a *Client) LifecycleApproved(params *LifecycleApprovedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LifecycleApprovedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLifecycleApprovedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "lifecycleApproved",
		Method:             "GET",
		PathPattern:        "/v1/lifecycle/{channelName}/approved/{chaincodeName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LifecycleApprovedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LifecycleApprovedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LifecycleApprovedDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LifecycleCheckCommitReadiness gets a map of orgs to their approval true false for the definition supplied as args of certain chaincode on channel
*/
func (a *Client) LifecycleCheckCommitReadiness(params *LifecycleCheckCommitReadinessParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LifecycleCheckCommitReadinessOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLifecycleCheckCommitReadinessParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "lifecycleCheckCommitReadiness",
		Method:             "POST",
		PathPattern:        "/v1/lifecycle/check-commit-readiness",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LifecycleCheckCommitReadinessReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LifecycleCheckCommitReadinessOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LifecycleCheckCommitReadinessDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LifecycleCommit commits for chaincode on channel
*/
func (a *Client) LifecycleCommit(params *LifecycleCommitParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LifecycleCommitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLifecycleCommitParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "lifecycleCommit",
		Method:             "POST",
		PathPattern:        "/v1/lifecycle/commit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LifecycleCommitReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LifecycleCommitOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LifecycleCommitDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LifecycleFull approves and commit chaincode on channel
*/
func (a *Client) LifecycleFull(params *LifecycleFullParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LifecycleFullOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLifecycleFullParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "lifecycleFull",
		Method:             "POST",
		PathPattern:        "/v1/lifecycle/full",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LifecycleFullReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LifecycleFullOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LifecycleFullDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LifecycleInit inits for chaincode on channel
*/
func (a *Client) LifecycleInit(params *LifecycleInitParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LifecycleInitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLifecycleInitParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "lifecycleInit",
		Method:             "POST",
		PathPattern:        "/v1/lifecycle/init",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LifecycleInitReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LifecycleInitOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LifecycleInitDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LifecycleStatus gets current committed chaincodes on channel
*/
func (a *Client) LifecycleStatus(params *LifecycleStatusParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*LifecycleStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLifecycleStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "lifecycleStatus",
		Method:             "GET",
		PathPattern:        "/v1/lifecycle/{channelName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LifecycleStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LifecycleStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LifecycleStatusDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
