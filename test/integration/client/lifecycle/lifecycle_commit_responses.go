// Code generated by go-swagger; DO NOT EDIT.

package lifecycle

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"gitlab.n-t.io/core/library/hlf-tool/hlf-control-plane/test/integration/models"
)

// LifecycleCommitReader is a Reader for the LifecycleCommit structure.
type LifecycleCommitReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LifecycleCommitReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLifecycleCommitOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewLifecycleCommitInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewLifecycleCommitDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewLifecycleCommitOK creates a LifecycleCommitOK with default headers values
func NewLifecycleCommitOK() *LifecycleCommitOK {
	return &LifecycleCommitOK{}
}

/*
LifecycleCommitOK describes a response with status code 200, with default header values.

A successful response.
*/
type LifecycleCommitOK struct {
	Payload models.ProtoLifecycleCommitResponse
}

// IsSuccess returns true when this lifecycle commit o k response has a 2xx status code
func (o *LifecycleCommitOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this lifecycle commit o k response has a 3xx status code
func (o *LifecycleCommitOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this lifecycle commit o k response has a 4xx status code
func (o *LifecycleCommitOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this lifecycle commit o k response has a 5xx status code
func (o *LifecycleCommitOK) IsServerError() bool {
	return false
}

// IsCode returns true when this lifecycle commit o k response a status code equal to that given
func (o *LifecycleCommitOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the lifecycle commit o k response
func (o *LifecycleCommitOK) Code() int {
	return 200
}

func (o *LifecycleCommitOK) Error() string {
	return fmt.Sprintf("[POST /v1/lifecycle/commit][%d] lifecycleCommitOK  %+v", 200, o.Payload)
}

func (o *LifecycleCommitOK) String() string {
	return fmt.Sprintf("[POST /v1/lifecycle/commit][%d] lifecycleCommitOK  %+v", 200, o.Payload)
}

func (o *LifecycleCommitOK) GetPayload() models.ProtoLifecycleCommitResponse {
	return o.Payload
}

func (o *LifecycleCommitOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLifecycleCommitInternalServerError creates a LifecycleCommitInternalServerError with default headers values
func NewLifecycleCommitInternalServerError() *LifecycleCommitInternalServerError {
	return &LifecycleCommitInternalServerError{}
}

/*
LifecycleCommitInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type LifecycleCommitInternalServerError struct {
	Payload *models.ProtoErrorResponse
}

// IsSuccess returns true when this lifecycle commit internal server error response has a 2xx status code
func (o *LifecycleCommitInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this lifecycle commit internal server error response has a 3xx status code
func (o *LifecycleCommitInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this lifecycle commit internal server error response has a 4xx status code
func (o *LifecycleCommitInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this lifecycle commit internal server error response has a 5xx status code
func (o *LifecycleCommitInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this lifecycle commit internal server error response a status code equal to that given
func (o *LifecycleCommitInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the lifecycle commit internal server error response
func (o *LifecycleCommitInternalServerError) Code() int {
	return 500
}

func (o *LifecycleCommitInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/lifecycle/commit][%d] lifecycleCommitInternalServerError  %+v", 500, o.Payload)
}

func (o *LifecycleCommitInternalServerError) String() string {
	return fmt.Sprintf("[POST /v1/lifecycle/commit][%d] lifecycleCommitInternalServerError  %+v", 500, o.Payload)
}

func (o *LifecycleCommitInternalServerError) GetPayload() *models.ProtoErrorResponse {
	return o.Payload
}

func (o *LifecycleCommitInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProtoErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLifecycleCommitDefault creates a LifecycleCommitDefault with default headers values
func NewLifecycleCommitDefault(code int) *LifecycleCommitDefault {
	return &LifecycleCommitDefault{
		_statusCode: code,
	}
}

/*
LifecycleCommitDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type LifecycleCommitDefault struct {
	_statusCode int

	Payload *models.RPCStatus
}

// IsSuccess returns true when this lifecycle commit default response has a 2xx status code
func (o *LifecycleCommitDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this lifecycle commit default response has a 3xx status code
func (o *LifecycleCommitDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this lifecycle commit default response has a 4xx status code
func (o *LifecycleCommitDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this lifecycle commit default response has a 5xx status code
func (o *LifecycleCommitDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this lifecycle commit default response a status code equal to that given
func (o *LifecycleCommitDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the lifecycle commit default response
func (o *LifecycleCommitDefault) Code() int {
	return o._statusCode
}

func (o *LifecycleCommitDefault) Error() string {
	return fmt.Sprintf("[POST /v1/lifecycle/commit][%d] lifecycleCommit default  %+v", o._statusCode, o.Payload)
}

func (o *LifecycleCommitDefault) String() string {
	return fmt.Sprintf("[POST /v1/lifecycle/commit][%d] lifecycleCommit default  %+v", o._statusCode, o.Payload)
}

func (o *LifecycleCommitDefault) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *LifecycleCommitDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
