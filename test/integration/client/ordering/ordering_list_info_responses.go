// Code generated by go-swagger; DO NOT EDIT.

package ordering

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"gitlab.n-t.io/core/library/hlf-tool/hlf-control-plane/test/integration/models"
)

// OrderingListInfoReader is a Reader for the OrderingListInfo structure.
type OrderingListInfoReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *OrderingListInfoReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewOrderingListInfoOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewOrderingListInfoInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewOrderingListInfoDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewOrderingListInfoOK creates a OrderingListInfoOK with default headers values
func NewOrderingListInfoOK() *OrderingListInfoOK {
	return &OrderingListInfoOK{}
}

/*
OrderingListInfoOK describes a response with status code 200, with default header values.

A successful response.
*/
type OrderingListInfoOK struct {
	Payload *models.ProtoOrderingListInfoResponse
}

// IsSuccess returns true when this ordering list info o k response has a 2xx status code
func (o *OrderingListInfoOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this ordering list info o k response has a 3xx status code
func (o *OrderingListInfoOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ordering list info o k response has a 4xx status code
func (o *OrderingListInfoOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this ordering list info o k response has a 5xx status code
func (o *OrderingListInfoOK) IsServerError() bool {
	return false
}

// IsCode returns true when this ordering list info o k response a status code equal to that given
func (o *OrderingListInfoOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the ordering list info o k response
func (o *OrderingListInfoOK) Code() int {
	return 200
}

func (o *OrderingListInfoOK) Error() string {
	return fmt.Sprintf("[POST /v1/ordering/{channelName}/list][%d] orderingListInfoOK  %+v", 200, o.Payload)
}

func (o *OrderingListInfoOK) String() string {
	return fmt.Sprintf("[POST /v1/ordering/{channelName}/list][%d] orderingListInfoOK  %+v", 200, o.Payload)
}

func (o *OrderingListInfoOK) GetPayload() *models.ProtoOrderingListInfoResponse {
	return o.Payload
}

func (o *OrderingListInfoOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProtoOrderingListInfoResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOrderingListInfoInternalServerError creates a OrderingListInfoInternalServerError with default headers values
func NewOrderingListInfoInternalServerError() *OrderingListInfoInternalServerError {
	return &OrderingListInfoInternalServerError{}
}

/*
OrderingListInfoInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type OrderingListInfoInternalServerError struct {
	Payload *models.ProtoErrorResponse
}

// IsSuccess returns true when this ordering list info internal server error response has a 2xx status code
func (o *OrderingListInfoInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this ordering list info internal server error response has a 3xx status code
func (o *OrderingListInfoInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this ordering list info internal server error response has a 4xx status code
func (o *OrderingListInfoInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this ordering list info internal server error response has a 5xx status code
func (o *OrderingListInfoInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this ordering list info internal server error response a status code equal to that given
func (o *OrderingListInfoInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the ordering list info internal server error response
func (o *OrderingListInfoInternalServerError) Code() int {
	return 500
}

func (o *OrderingListInfoInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/ordering/{channelName}/list][%d] orderingListInfoInternalServerError  %+v", 500, o.Payload)
}

func (o *OrderingListInfoInternalServerError) String() string {
	return fmt.Sprintf("[POST /v1/ordering/{channelName}/list][%d] orderingListInfoInternalServerError  %+v", 500, o.Payload)
}

func (o *OrderingListInfoInternalServerError) GetPayload() *models.ProtoErrorResponse {
	return o.Payload
}

func (o *OrderingListInfoInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProtoErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOrderingListInfoDefault creates a OrderingListInfoDefault with default headers values
func NewOrderingListInfoDefault(code int) *OrderingListInfoDefault {
	return &OrderingListInfoDefault{
		_statusCode: code,
	}
}

/*
OrderingListInfoDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type OrderingListInfoDefault struct {
	_statusCode int

	Payload *models.RPCStatus
}

// IsSuccess returns true when this ordering list info default response has a 2xx status code
func (o *OrderingListInfoDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this ordering list info default response has a 3xx status code
func (o *OrderingListInfoDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this ordering list info default response has a 4xx status code
func (o *OrderingListInfoDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this ordering list info default response has a 5xx status code
func (o *OrderingListInfoDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this ordering list info default response a status code equal to that given
func (o *OrderingListInfoDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the ordering list info default response
func (o *OrderingListInfoDefault) Code() int {
	return o._statusCode
}

func (o *OrderingListInfoDefault) Error() string {
	return fmt.Sprintf("[POST /v1/ordering/{channelName}/list][%d] orderingListInfo default  %+v", o._statusCode, o.Payload)
}

func (o *OrderingListInfoDefault) String() string {
	return fmt.Sprintf("[POST /v1/ordering/{channelName}/list][%d] orderingListInfo default  %+v", o._statusCode, o.Payload)
}

func (o *OrderingListInfoDefault) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *OrderingListInfoDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
OrderingListInfoBody ordering list info body
swagger:model OrderingListInfoBody
*/
type OrderingListInfoBody struct {

	// host
	Host string `json:"host,omitempty"`

	// joined orderer
	JoinedOrderer []*models.OrderingRequestJoined `json:"joinedOrderer"`

	// port
	Port int64 `json:"port,omitempty"`
}

// Validate validates this ordering list info body
func (o *OrderingListInfoBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateJoinedOrderer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OrderingListInfoBody) validateJoinedOrderer(formats strfmt.Registry) error {
	if swag.IsZero(o.JoinedOrderer) { // not required
		return nil
	}

	for i := 0; i < len(o.JoinedOrderer); i++ {
		if swag.IsZero(o.JoinedOrderer[i]) { // not required
			continue
		}

		if o.JoinedOrderer[i] != nil {
			if err := o.JoinedOrderer[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "joinedOrderer" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "joinedOrderer" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this ordering list info body based on the context it is used
func (o *OrderingListInfoBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateJoinedOrderer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *OrderingListInfoBody) contextValidateJoinedOrderer(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.JoinedOrderer); i++ {

		if o.JoinedOrderer[i] != nil {

			if swag.IsZero(o.JoinedOrderer[i]) { // not required
				return nil
			}

			if err := o.JoinedOrderer[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("body" + "." + "joinedOrderer" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("body" + "." + "joinedOrderer" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *OrderingListInfoBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *OrderingListInfoBody) UnmarshalBinary(b []byte) error {
	var res OrderingListInfoBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
