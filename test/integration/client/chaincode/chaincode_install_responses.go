// Code generated by go-swagger; DO NOT EDIT.

package chaincode

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/atomyze-foundation/hlf-control-plane/test/integration/models"
)

// ChaincodeInstallReader is a Reader for the ChaincodeInstall structure.
type ChaincodeInstallReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ChaincodeInstallReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewChaincodeInstallOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewChaincodeInstallInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewChaincodeInstallDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewChaincodeInstallOK creates a ChaincodeInstallOK with default headers values
func NewChaincodeInstallOK() *ChaincodeInstallOK {
	return &ChaincodeInstallOK{}
}

/*
ChaincodeInstallOK describes a response with status code 200, with default header values.

A successful response.
*/
type ChaincodeInstallOK struct {
	Payload *models.ProtoChaincodeInstallResponse
}

// IsSuccess returns true when this chaincode install o k response has a 2xx status code
func (o *ChaincodeInstallOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this chaincode install o k response has a 3xx status code
func (o *ChaincodeInstallOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this chaincode install o k response has a 4xx status code
func (o *ChaincodeInstallOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this chaincode install o k response has a 5xx status code
func (o *ChaincodeInstallOK) IsServerError() bool {
	return false
}

// IsCode returns true when this chaincode install o k response a status code equal to that given
func (o *ChaincodeInstallOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the chaincode install o k response
func (o *ChaincodeInstallOK) Code() int {
	return 200
}

func (o *ChaincodeInstallOK) Error() string {
	return fmt.Sprintf("[POST /v1/chaincode/install][%d] chaincodeInstallOK  %+v", 200, o.Payload)
}

func (o *ChaincodeInstallOK) String() string {
	return fmt.Sprintf("[POST /v1/chaincode/install][%d] chaincodeInstallOK  %+v", 200, o.Payload)
}

func (o *ChaincodeInstallOK) GetPayload() *models.ProtoChaincodeInstallResponse {
	return o.Payload
}

func (o *ChaincodeInstallOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProtoChaincodeInstallResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChaincodeInstallInternalServerError creates a ChaincodeInstallInternalServerError with default headers values
func NewChaincodeInstallInternalServerError() *ChaincodeInstallInternalServerError {
	return &ChaincodeInstallInternalServerError{}
}

/*
ChaincodeInstallInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type ChaincodeInstallInternalServerError struct {
	Payload *models.ProtoErrorResponse
}

// IsSuccess returns true when this chaincode install internal server error response has a 2xx status code
func (o *ChaincodeInstallInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this chaincode install internal server error response has a 3xx status code
func (o *ChaincodeInstallInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this chaincode install internal server error response has a 4xx status code
func (o *ChaincodeInstallInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this chaincode install internal server error response has a 5xx status code
func (o *ChaincodeInstallInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this chaincode install internal server error response a status code equal to that given
func (o *ChaincodeInstallInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the chaincode install internal server error response
func (o *ChaincodeInstallInternalServerError) Code() int {
	return 500
}

func (o *ChaincodeInstallInternalServerError) Error() string {
	return fmt.Sprintf("[POST /v1/chaincode/install][%d] chaincodeInstallInternalServerError  %+v", 500, o.Payload)
}

func (o *ChaincodeInstallInternalServerError) String() string {
	return fmt.Sprintf("[POST /v1/chaincode/install][%d] chaincodeInstallInternalServerError  %+v", 500, o.Payload)
}

func (o *ChaincodeInstallInternalServerError) GetPayload() *models.ProtoErrorResponse {
	return o.Payload
}

func (o *ChaincodeInstallInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProtoErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewChaincodeInstallDefault creates a ChaincodeInstallDefault with default headers values
func NewChaincodeInstallDefault(code int) *ChaincodeInstallDefault {
	return &ChaincodeInstallDefault{
		_statusCode: code,
	}
}

/*
ChaincodeInstallDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type ChaincodeInstallDefault struct {
	_statusCode int

	Payload *models.RPCStatus
}

// IsSuccess returns true when this chaincode install default response has a 2xx status code
func (o *ChaincodeInstallDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this chaincode install default response has a 3xx status code
func (o *ChaincodeInstallDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this chaincode install default response has a 4xx status code
func (o *ChaincodeInstallDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this chaincode install default response has a 5xx status code
func (o *ChaincodeInstallDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this chaincode install default response a status code equal to that given
func (o *ChaincodeInstallDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the chaincode install default response
func (o *ChaincodeInstallDefault) Code() int {
	return o._statusCode
}

func (o *ChaincodeInstallDefault) Error() string {
	return fmt.Sprintf("[POST /v1/chaincode/install][%d] chaincodeInstall default  %+v", o._statusCode, o.Payload)
}

func (o *ChaincodeInstallDefault) String() string {
	return fmt.Sprintf("[POST /v1/chaincode/install][%d] chaincodeInstall default  %+v", o._statusCode, o.Payload)
}

func (o *ChaincodeInstallDefault) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *ChaincodeInstallDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
