// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MspFabricNodeOUs FabricNodeOUs contains configuration to tell apart clients from peers from orderers
// based on OUs. If NodeOUs recognition is enabled then an msp identity
// that does not contain any of the specified OU will be considered invalid.
//
// swagger:model mspFabricNodeOUs
type MspFabricNodeOUs struct {

	// OU Identifier of the admins
	AdminOuIdentifier *MspFabricOUIdentifier `json:"adminOuIdentifier,omitempty"`

	// OU Identifier of the clients
	ClientOuIdentifier *MspFabricOUIdentifier `json:"clientOuIdentifier,omitempty"`

	// If true then an msp identity that does not contain any of the specified OU will be considered invalid.
	Enable bool `json:"enable,omitempty"`

	// OU Identifier of the orderers
	OrdererOuIdentifier *MspFabricOUIdentifier `json:"ordererOuIdentifier,omitempty"`

	// OU Identifier of the peers
	PeerOuIdentifier *MspFabricOUIdentifier `json:"peerOuIdentifier,omitempty"`
}

// Validate validates this msp fabric node o us
func (m *MspFabricNodeOUs) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdminOuIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientOuIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrdererOuIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeerOuIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MspFabricNodeOUs) validateAdminOuIdentifier(formats strfmt.Registry) error {
	if swag.IsZero(m.AdminOuIdentifier) { // not required
		return nil
	}

	if m.AdminOuIdentifier != nil {
		if err := m.AdminOuIdentifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adminOuIdentifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("adminOuIdentifier")
			}
			return err
		}
	}

	return nil
}

func (m *MspFabricNodeOUs) validateClientOuIdentifier(formats strfmt.Registry) error {
	if swag.IsZero(m.ClientOuIdentifier) { // not required
		return nil
	}

	if m.ClientOuIdentifier != nil {
		if err := m.ClientOuIdentifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clientOuIdentifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clientOuIdentifier")
			}
			return err
		}
	}

	return nil
}

func (m *MspFabricNodeOUs) validateOrdererOuIdentifier(formats strfmt.Registry) error {
	if swag.IsZero(m.OrdererOuIdentifier) { // not required
		return nil
	}

	if m.OrdererOuIdentifier != nil {
		if err := m.OrdererOuIdentifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ordererOuIdentifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ordererOuIdentifier")
			}
			return err
		}
	}

	return nil
}

func (m *MspFabricNodeOUs) validatePeerOuIdentifier(formats strfmt.Registry) error {
	if swag.IsZero(m.PeerOuIdentifier) { // not required
		return nil
	}

	if m.PeerOuIdentifier != nil {
		if err := m.PeerOuIdentifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("peerOuIdentifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("peerOuIdentifier")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this msp fabric node o us based on the context it is used
func (m *MspFabricNodeOUs) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdminOuIdentifier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClientOuIdentifier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrdererOuIdentifier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePeerOuIdentifier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MspFabricNodeOUs) contextValidateAdminOuIdentifier(ctx context.Context, formats strfmt.Registry) error {

	if m.AdminOuIdentifier != nil {

		if swag.IsZero(m.AdminOuIdentifier) { // not required
			return nil
		}

		if err := m.AdminOuIdentifier.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adminOuIdentifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("adminOuIdentifier")
			}
			return err
		}
	}

	return nil
}

func (m *MspFabricNodeOUs) contextValidateClientOuIdentifier(ctx context.Context, formats strfmt.Registry) error {

	if m.ClientOuIdentifier != nil {

		if swag.IsZero(m.ClientOuIdentifier) { // not required
			return nil
		}

		if err := m.ClientOuIdentifier.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clientOuIdentifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clientOuIdentifier")
			}
			return err
		}
	}

	return nil
}

func (m *MspFabricNodeOUs) contextValidateOrdererOuIdentifier(ctx context.Context, formats strfmt.Registry) error {

	if m.OrdererOuIdentifier != nil {

		if swag.IsZero(m.OrdererOuIdentifier) { // not required
			return nil
		}

		if err := m.OrdererOuIdentifier.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ordererOuIdentifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ordererOuIdentifier")
			}
			return err
		}
	}

	return nil
}

func (m *MspFabricNodeOUs) contextValidatePeerOuIdentifier(ctx context.Context, formats strfmt.Registry) error {

	if m.PeerOuIdentifier != nil {

		if swag.IsZero(m.PeerOuIdentifier) { // not required
			return nil
		}

		if err := m.PeerOuIdentifier.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("peerOuIdentifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("peerOuIdentifier")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MspFabricNodeOUs) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MspFabricNodeOUs) UnmarshalBinary(b []byte) error {
	var res MspFabricNodeOUs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
