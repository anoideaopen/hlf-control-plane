// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ProtoChaincodeInstallExternalRequest proto chaincode install external request
//
// swagger:model protoChaincodeInstallExternalRequest
type ProtoChaincodeInstallExternalRequest struct {

	// Base domain for
	Address string `json:"address,omitempty"`

	// enable conn check
	EnableConnCheck bool `json:"enableConnCheck,omitempty"`

	// Label for chaincode
	Label string `json:"label,omitempty"`

	// Connection timeout duration
	Timeout string `json:"timeout,omitempty"`

	// tls cert
	// Format: byte
	TLSCert strfmt.Base64 `json:"tlsCert,omitempty"`

	// Flag of tls client auth required
	TLSClientAuth bool `json:"tlsClientAuth,omitempty"`

	// tls key
	// Format: byte
	TLSKey strfmt.Base64 `json:"tlsKey,omitempty"`

	// Flag of tls required
	TLSRequired bool `json:"tlsRequired,omitempty"`

	// tls root cert
	// Format: byte
	TLSRootCert strfmt.Base64 `json:"tlsRootCert,omitempty"`

	// External chaincode type
	Type string `json:"type,omitempty"`
}

// Validate validates this proto chaincode install external request
func (m *ProtoChaincodeInstallExternalRequest) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this proto chaincode install external request based on context it is used
func (m *ProtoChaincodeInstallExternalRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProtoChaincodeInstallExternalRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProtoChaincodeInstallExternalRequest) UnmarshalBinary(b []byte) error {
	var res ProtoChaincodeInstallExternalRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
