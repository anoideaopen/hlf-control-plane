// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MspSigningIdentityInfo SigningIdentityInfo represents the configuration information
// related to the signing identity the peer is to use for generating
// endorsements
//
// swagger:model mspSigningIdentityInfo
type MspSigningIdentityInfo struct {

	// PrivateSigner denotes a reference to the private key of the
	// peer's signing identity
	PrivateSigner *MspKeyInfo `json:"privateSigner,omitempty"`

	// PublicSigner carries the public information of the signing
	// identity. For an X.509 provider this would be represented by
	// an X.509 certificate
	// Format: byte
	PublicSigner strfmt.Base64 `json:"publicSigner,omitempty"`
}

// Validate validates this msp signing identity info
func (m *MspSigningIdentityInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePrivateSigner(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MspSigningIdentityInfo) validatePrivateSigner(formats strfmt.Registry) error {
	if swag.IsZero(m.PrivateSigner) { // not required
		return nil
	}

	if m.PrivateSigner != nil {
		if err := m.PrivateSigner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("privateSigner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("privateSigner")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this msp signing identity info based on the context it is used
func (m *MspSigningIdentityInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePrivateSigner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MspSigningIdentityInfo) contextValidatePrivateSigner(ctx context.Context, formats strfmt.Registry) error {

	if m.PrivateSigner != nil {

		if swag.IsZero(m.PrivateSigner) { // not required
			return nil
		}

		if err := m.PrivateSigner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("privateSigner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("privateSigner")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MspSigningIdentityInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MspSigningIdentityInfo) UnmarshalBinary(b []byte) error {
	var res MspSigningIdentityInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
