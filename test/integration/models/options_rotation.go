// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OptionsRotation options rotation
//
// swagger:model OptionsRotation
type OptionsRotation string

func NewOptionsRotation(value OptionsRotation) *OptionsRotation {
	return &value
}

// Pointer returns a pointer to a freshly-allocated OptionsRotation.
func (m OptionsRotation) Pointer() *OptionsRotation {
	return &m
}

const (

	// OptionsRotationUNDEFINED captures enum value "UNDEFINED"
	OptionsRotationUNDEFINED OptionsRotation = "UNDEFINED"

	// OptionsRotationOFF captures enum value "OFF"
	OptionsRotationOFF OptionsRotation = "OFF"

	// OptionsRotationON captures enum value "ON"
	OptionsRotationON OptionsRotation = "ON"
)

// for schema
var optionsRotationEnum []interface{}

func init() {
	var res []OptionsRotation
	if err := json.Unmarshal([]byte(`["UNDEFINED","OFF","ON"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		optionsRotationEnum = append(optionsRotationEnum, v)
	}
}

func (m OptionsRotation) validateOptionsRotationEnum(path, location string, value OptionsRotation) error {
	if err := validate.EnumCase(path, location, value, optionsRotationEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this options rotation
func (m OptionsRotation) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOptionsRotationEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this options rotation based on context it is used
func (m OptionsRotation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
