// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: chaincode.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ChaincodeInstallRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChaincodeInstallRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChaincodeInstallRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChaincodeInstallRequestMultiError, or nil if none found.
func (m *ChaincodeInstallRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChaincodeInstallRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Source

	// no validation rules for AuthHeaders

	if len(errors) > 0 {
		return ChaincodeInstallRequestMultiError(errors)
	}

	return nil
}

// ChaincodeInstallRequestMultiError is an error wrapping multiple validation
// errors returned by ChaincodeInstallRequest.ValidateAll() if the designated
// constraints aren't met.
type ChaincodeInstallRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChaincodeInstallRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChaincodeInstallRequestMultiError) AllErrors() []error { return m }

// ChaincodeInstallRequestValidationError is the validation error returned by
// ChaincodeInstallRequest.Validate if the designated constraints aren't met.
type ChaincodeInstallRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChaincodeInstallRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChaincodeInstallRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChaincodeInstallRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChaincodeInstallRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChaincodeInstallRequestValidationError) ErrorName() string {
	return "ChaincodeInstallRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChaincodeInstallRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChaincodeInstallRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChaincodeInstallRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChaincodeInstallRequestValidationError{}

// Validate checks the field values on ChaincodeInstallResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChaincodeInstallResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChaincodeInstallResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChaincodeInstallResponseMultiError, or nil if none found.
func (m *ChaincodeInstallResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChaincodeInstallResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChaincodeInstallResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChaincodeInstallResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChaincodeInstallResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChaincodeInstallResponseMultiError(errors)
	}

	return nil
}

// ChaincodeInstallResponseMultiError is an error wrapping multiple validation
// errors returned by ChaincodeInstallResponse.ValidateAll() if the designated
// constraints aren't met.
type ChaincodeInstallResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChaincodeInstallResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChaincodeInstallResponseMultiError) AllErrors() []error { return m }

// ChaincodeInstallResponseValidationError is the validation error returned by
// ChaincodeInstallResponse.Validate if the designated constraints aren't met.
type ChaincodeInstallResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChaincodeInstallResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChaincodeInstallResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChaincodeInstallResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChaincodeInstallResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChaincodeInstallResponseValidationError) ErrorName() string {
	return "ChaincodeInstallResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChaincodeInstallResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChaincodeInstallResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChaincodeInstallResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChaincodeInstallResponseValidationError{}

// Validate checks the field values on ChaincodeInstallExternalRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChaincodeInstallExternalRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChaincodeInstallExternalRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ChaincodeInstallExternalRequestMultiError, or nil if none found.
func (m *ChaincodeInstallExternalRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChaincodeInstallExternalRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Label

	// no validation rules for BaseDomain

	if len(errors) > 0 {
		return ChaincodeInstallExternalRequestMultiError(errors)
	}

	return nil
}

// ChaincodeInstallExternalRequestMultiError is an error wrapping multiple
// validation errors returned by ChaincodeInstallExternalRequest.ValidateAll()
// if the designated constraints aren't met.
type ChaincodeInstallExternalRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChaincodeInstallExternalRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChaincodeInstallExternalRequestMultiError) AllErrors() []error { return m }

// ChaincodeInstallExternalRequestValidationError is the validation error
// returned by ChaincodeInstallExternalRequest.Validate if the designated
// constraints aren't met.
type ChaincodeInstallExternalRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChaincodeInstallExternalRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChaincodeInstallExternalRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChaincodeInstallExternalRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChaincodeInstallExternalRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChaincodeInstallExternalRequestValidationError) ErrorName() string {
	return "ChaincodeInstallExternalRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChaincodeInstallExternalRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChaincodeInstallExternalRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChaincodeInstallExternalRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChaincodeInstallExternalRequestValidationError{}

// Validate checks the field values on ChaincodeInstalledResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChaincodeInstalledResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChaincodeInstalledResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChaincodeInstalledResponseMultiError, or nil if none found.
func (m *ChaincodeInstalledResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChaincodeInstalledResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChaincodeInstalledResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChaincodeInstalledResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChaincodeInstalledResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChaincodeInstalledResponseMultiError(errors)
	}

	return nil
}

// ChaincodeInstalledResponseMultiError is an error wrapping multiple
// validation errors returned by ChaincodeInstalledResponse.ValidateAll() if
// the designated constraints aren't met.
type ChaincodeInstalledResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChaincodeInstalledResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChaincodeInstalledResponseMultiError) AllErrors() []error { return m }

// ChaincodeInstalledResponseValidationError is the validation error returned
// by ChaincodeInstalledResponse.Validate if the designated constraints aren't met.
type ChaincodeInstalledResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChaincodeInstalledResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChaincodeInstalledResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChaincodeInstalledResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChaincodeInstalledResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChaincodeInstalledResponseValidationError) ErrorName() string {
	return "ChaincodeInstalledResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChaincodeInstalledResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChaincodeInstalledResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChaincodeInstalledResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChaincodeInstalledResponseValidationError{}

// Validate checks the field values on ChaincodeInstallResponse_Result with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChaincodeInstallResponse_Result) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChaincodeInstallResponse_Result with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ChaincodeInstallResponse_ResultMultiError, or nil if none found.
func (m *ChaincodeInstallResponse_Result) ValidateAll() error {
	return m.validate(true)
}

func (m *ChaincodeInstallResponse_Result) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Peer

	// no validation rules for Label

	switch v := m.Result.(type) {
	case *ChaincodeInstallResponse_Result_Existed:
		if v == nil {
			err := ChaincodeInstallResponse_ResultValidationError{
				field:  "Result",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Existed
	case *ChaincodeInstallResponse_Result_Err:
		if v == nil {
			err := ChaincodeInstallResponse_ResultValidationError{
				field:  "Result",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Err
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ChaincodeInstallResponse_ResultMultiError(errors)
	}

	return nil
}

// ChaincodeInstallResponse_ResultMultiError is an error wrapping multiple
// validation errors returned by ChaincodeInstallResponse_Result.ValidateAll()
// if the designated constraints aren't met.
type ChaincodeInstallResponse_ResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChaincodeInstallResponse_ResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChaincodeInstallResponse_ResultMultiError) AllErrors() []error { return m }

// ChaincodeInstallResponse_ResultValidationError is the validation error
// returned by ChaincodeInstallResponse_Result.Validate if the designated
// constraints aren't met.
type ChaincodeInstallResponse_ResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChaincodeInstallResponse_ResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChaincodeInstallResponse_ResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChaincodeInstallResponse_ResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChaincodeInstallResponse_ResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChaincodeInstallResponse_ResultValidationError) ErrorName() string {
	return "ChaincodeInstallResponse_ResultValidationError"
}

// Error satisfies the builtin error interface
func (e ChaincodeInstallResponse_ResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChaincodeInstallResponse_Result.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChaincodeInstallResponse_ResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChaincodeInstallResponse_ResultValidationError{}

// Validate checks the field values on ChaincodeInstalledResponse_Result with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ChaincodeInstalledResponse_Result) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChaincodeInstalledResponse_Result
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ChaincodeInstalledResponse_ResultMultiError, or nil if none found.
func (m *ChaincodeInstalledResponse_Result) ValidateAll() error {
	return m.validate(true)
}

func (m *ChaincodeInstalledResponse_Result) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PackageId

	// no validation rules for Label

	if len(errors) > 0 {
		return ChaincodeInstalledResponse_ResultMultiError(errors)
	}

	return nil
}

// ChaincodeInstalledResponse_ResultMultiError is an error wrapping multiple
// validation errors returned by
// ChaincodeInstalledResponse_Result.ValidateAll() if the designated
// constraints aren't met.
type ChaincodeInstalledResponse_ResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChaincodeInstalledResponse_ResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChaincodeInstalledResponse_ResultMultiError) AllErrors() []error { return m }

// ChaincodeInstalledResponse_ResultValidationError is the validation error
// returned by ChaincodeInstalledResponse_Result.Validate if the designated
// constraints aren't met.
type ChaincodeInstalledResponse_ResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChaincodeInstalledResponse_ResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChaincodeInstalledResponse_ResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChaincodeInstalledResponse_ResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChaincodeInstalledResponse_ResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChaincodeInstalledResponse_ResultValidationError) ErrorName() string {
	return "ChaincodeInstalledResponse_ResultValidationError"
}

// Error satisfies the builtin error interface
func (e ChaincodeInstalledResponse_ResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChaincodeInstalledResponse_Result.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChaincodeInstalledResponse_ResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChaincodeInstalledResponse_ResultValidationError{}
