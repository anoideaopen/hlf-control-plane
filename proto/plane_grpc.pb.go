// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: plane.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChaincodeService_ChaincodeInstall_FullMethodName              = "/proto.ChaincodeService/ChaincodeInstall"
	ChaincodeService_ChaincodeInstallExternal_FullMethodName      = "/proto.ChaincodeService/ChaincodeInstallExternal"
	ChaincodeService_ChaincodeInstalled_FullMethodName            = "/proto.ChaincodeService/ChaincodeInstalled"
	ChaincodeService_ChannelJoined_FullMethodName                 = "/proto.ChaincodeService/ChannelJoined"
	ChaincodeService_ChannelJoin_FullMethodName                   = "/proto.ChaincodeService/ChannelJoin"
	ChaincodeService_ChannelCreate_FullMethodName                 = "/proto.ChaincodeService/ChannelCreate"
	ChaincodeService_LifecycleStatus_FullMethodName               = "/proto.ChaincodeService/LifecycleStatus"
	ChaincodeService_LifecycleApproved_FullMethodName             = "/proto.ChaincodeService/LifecycleApproved"
	ChaincodeService_LifecycleCheckCommitReadiness_FullMethodName = "/proto.ChaincodeService/LifecycleCheckCommitReadiness"
	ChaincodeService_LifecycleFull_FullMethodName                 = "/proto.ChaincodeService/LifecycleFull"
	ChaincodeService_LifecycleApproveForMyOrg_FullMethodName      = "/proto.ChaincodeService/LifecycleApproveForMyOrg"
	ChaincodeService_LifecycleCommit_FullMethodName               = "/proto.ChaincodeService/LifecycleCommit"
	ChaincodeService_LifecycleInit_FullMethodName                 = "/proto.ChaincodeService/LifecycleInit"
	ChaincodeService_ConfigAnchorList_FullMethodName              = "/proto.ChaincodeService/ConfigAnchorList"
	ChaincodeService_ConfigAnchorModify_FullMethodName            = "/proto.ChaincodeService/ConfigAnchorModify"
	ChaincodeService_ConfigOrderingList_FullMethodName            = "/proto.ChaincodeService/ConfigOrderingList"
	ChaincodeService_ConfigOrderingAdd_FullMethodName             = "/proto.ChaincodeService/ConfigOrderingAdd"
	ChaincodeService_ConfigOrderingUpdate_FullMethodName          = "/proto.ChaincodeService/ConfigOrderingUpdate"
	ChaincodeService_ConfigOrderingDelete_FullMethodName          = "/proto.ChaincodeService/ConfigOrderingDelete"
	ChaincodeService_ConfigSmartBFTGet_FullMethodName             = "/proto.ChaincodeService/ConfigSmartBFTGet"
	ChaincodeService_ConfigSmartBFTSet_FullMethodName             = "/proto.ChaincodeService/ConfigSmartBFTSet"
	ChaincodeService_ConfigOrganizationDelete_FullMethodName      = "/proto.ChaincodeService/ConfigOrganizationDelete"
	ChaincodeService_ConfigGet_FullMethodName                     = "/proto.ChaincodeService/ConfigGet"
	ChaincodeService_DiscoveryEndorsers_FullMethodName            = "/proto.ChaincodeService/DiscoveryEndorsers"
	ChaincodeService_DiscoveryPeers_FullMethodName                = "/proto.ChaincodeService/DiscoveryPeers"
	ChaincodeService_DiscoveryConfig_FullMethodName               = "/proto.ChaincodeService/DiscoveryConfig"
	ChaincodeService_OrderingJoin_FullMethodName                  = "/proto.ChaincodeService/OrderingJoin"
	ChaincodeService_OrderingListInfo_FullMethodName              = "/proto.ChaincodeService/OrderingListInfo"
	ChaincodeService_OrderingRemove_FullMethodName                = "/proto.ChaincodeService/OrderingRemove"
)

// ChaincodeServiceClient is the client API for ChaincodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChaincodeServiceClient interface {
	ChaincodeInstall(ctx context.Context, in *ChaincodeInstallRequest, opts ...grpc.CallOption) (*ChaincodeInstallResponse, error)
	ChaincodeInstallExternal(ctx context.Context, in *ChaincodeInstallExternalRequest, opts ...grpc.CallOption) (*ChaincodeInstallResponse, error)
	ChaincodeInstalled(ctx context.Context, in *ChaincodeInstalledRequest, opts ...grpc.CallOption) (*ChaincodeInstalledResponse, error)
	ChannelJoined(ctx context.Context, in *ChannelJoinedRequest, opts ...grpc.CallOption) (*ChannelJoinedResponse, error)
	ChannelJoin(ctx context.Context, in *ChannelJoinRequest, opts ...grpc.CallOption) (*ChannelJoinResponse, error)
	ChannelCreate(ctx context.Context, in *ChannelCreateRequest, opts ...grpc.CallOption) (*ChannelCreateResponse, error)
	LifecycleStatus(ctx context.Context, in *LifecycleStatusRequest, opts ...grpc.CallOption) (*LifecycleStatusResponse, error)
	LifecycleApproved(ctx context.Context, in *LifecycleApprovedRequest, opts ...grpc.CallOption) (*LifecycleApprovedResponse, error)
	LifecycleCheckCommitReadiness(ctx context.Context, in *LifecycleCheckCommitReadinessRequest, opts ...grpc.CallOption) (*LifecycleCheckCommitReadinessResponse, error)
	LifecycleFull(ctx context.Context, in *LifecycleFullRequest, opts ...grpc.CallOption) (*LifecycleFullResponse, error)
	LifecycleApproveForMyOrg(ctx context.Context, in *LifecycleApproveForMyOrgRequest, opts ...grpc.CallOption) (*LifecycleApproveForMyOrgResponse, error)
	LifecycleCommit(ctx context.Context, in *LifecycleCommitRequest, opts ...grpc.CallOption) (*LifecycleCommitResponse, error)
	LifecycleInit(ctx context.Context, in *LifecycleInitRequest, opts ...grpc.CallOption) (*LifecycleInitResponse, error)
	ConfigAnchorList(ctx context.Context, in *ConfigAnchorListRequest, opts ...grpc.CallOption) (*ConfigAnchorListResponse, error)
	ConfigAnchorModify(ctx context.Context, in *ConfigAnchorModifyRequest, opts ...grpc.CallOption) (*ConfigAnchorModifyResponse, error)
	ConfigOrderingList(ctx context.Context, in *ConfigOrderingListRequest, opts ...grpc.CallOption) (*ConfigOrderingListResponse, error)
	ConfigOrderingAdd(ctx context.Context, in *ConfigOrderingAddRequest, opts ...grpc.CallOption) (*ConfigOrderingAddResponse, error)
	ConfigOrderingUpdate(ctx context.Context, in *ConfigOrderingUpdateRequest, opts ...grpc.CallOption) (*ConfigOrderingUpdateResponse, error)
	ConfigOrderingDelete(ctx context.Context, in *ConfigOrderingDeleteRequest, opts ...grpc.CallOption) (*ConfigOrderingDeleteResponse, error)
	ConfigSmartBFTGet(ctx context.Context, in *ConfigSmartBFTGetRequest, opts ...grpc.CallOption) (*ConfigSmartBFTGetResponse, error)
	ConfigSmartBFTSet(ctx context.Context, in *ConfigSmartBFTSetRequest, opts ...grpc.CallOption) (*ConfigSmartBFTSetResponse, error)
	ConfigOrganizationDelete(ctx context.Context, in *ConfigOrganizationDeleteRequest, opts ...grpc.CallOption) (*ConfigOrganizationDeleteResponse, error)
	ConfigGet(ctx context.Context, in *ConfigGetRequest, opts ...grpc.CallOption) (*ConfigGetResponse, error)
	DiscoveryEndorsers(ctx context.Context, in *DiscoveryEndorsersRequest, opts ...grpc.CallOption) (*DiscoveryEndorsersResponse, error)
	DiscoveryPeers(ctx context.Context, in *DiscoveryPeersRequest, opts ...grpc.CallOption) (*DiscoveryPeersResponse, error)
	DiscoveryConfig(ctx context.Context, in *DiscoveryConfigRequest, opts ...grpc.CallOption) (*DiscoveryConfigResponse, error)
	OrderingJoin(ctx context.Context, in *OrderingRequest, opts ...grpc.CallOption) (*OrderingJoinResponse, error)
	OrderingListInfo(ctx context.Context, in *OrderingRequest, opts ...grpc.CallOption) (*OrderingListInfoResponse, error)
	OrderingRemove(ctx context.Context, in *OrderingRequest, opts ...grpc.CallOption) (*OrderingRemoveResponse, error)
}

type chaincodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChaincodeServiceClient(cc grpc.ClientConnInterface) ChaincodeServiceClient {
	return &chaincodeServiceClient{cc}
}

func (c *chaincodeServiceClient) ChaincodeInstall(ctx context.Context, in *ChaincodeInstallRequest, opts ...grpc.CallOption) (*ChaincodeInstallResponse, error) {
	out := new(ChaincodeInstallResponse)
	err := c.cc.Invoke(ctx, ChaincodeService_ChaincodeInstall_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeServiceClient) ChaincodeInstallExternal(ctx context.Context, in *ChaincodeInstallExternalRequest, opts ...grpc.CallOption) (*ChaincodeInstallResponse, error) {
	out := new(ChaincodeInstallResponse)
	err := c.cc.Invoke(ctx, ChaincodeService_ChaincodeInstallExternal_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeServiceClient) ChaincodeInstalled(ctx context.Context, in *ChaincodeInstalledRequest, opts ...grpc.CallOption) (*ChaincodeInstalledResponse, error) {
	out := new(ChaincodeInstalledResponse)
	err := c.cc.Invoke(ctx, ChaincodeService_ChaincodeInstalled_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeServiceClient) ChannelJoined(ctx context.Context, in *ChannelJoinedRequest, opts ...grpc.CallOption) (*ChannelJoinedResponse, error) {
	out := new(ChannelJoinedResponse)
	err := c.cc.Invoke(ctx, ChaincodeService_ChannelJoined_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeServiceClient) ChannelJoin(ctx context.Context, in *ChannelJoinRequest, opts ...grpc.CallOption) (*ChannelJoinResponse, error) {
	out := new(ChannelJoinResponse)
	err := c.cc.Invoke(ctx, ChaincodeService_ChannelJoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeServiceClient) ChannelCreate(ctx context.Context, in *ChannelCreateRequest, opts ...grpc.CallOption) (*ChannelCreateResponse, error) {
	out := new(ChannelCreateResponse)
	err := c.cc.Invoke(ctx, ChaincodeService_ChannelCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeServiceClient) LifecycleStatus(ctx context.Context, in *LifecycleStatusRequest, opts ...grpc.CallOption) (*LifecycleStatusResponse, error) {
	out := new(LifecycleStatusResponse)
	err := c.cc.Invoke(ctx, ChaincodeService_LifecycleStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeServiceClient) LifecycleApproved(ctx context.Context, in *LifecycleApprovedRequest, opts ...grpc.CallOption) (*LifecycleApprovedResponse, error) {
	out := new(LifecycleApprovedResponse)
	err := c.cc.Invoke(ctx, ChaincodeService_LifecycleApproved_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeServiceClient) LifecycleCheckCommitReadiness(ctx context.Context, in *LifecycleCheckCommitReadinessRequest, opts ...grpc.CallOption) (*LifecycleCheckCommitReadinessResponse, error) {
	out := new(LifecycleCheckCommitReadinessResponse)
	err := c.cc.Invoke(ctx, ChaincodeService_LifecycleCheckCommitReadiness_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeServiceClient) LifecycleFull(ctx context.Context, in *LifecycleFullRequest, opts ...grpc.CallOption) (*LifecycleFullResponse, error) {
	out := new(LifecycleFullResponse)
	err := c.cc.Invoke(ctx, ChaincodeService_LifecycleFull_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeServiceClient) LifecycleApproveForMyOrg(ctx context.Context, in *LifecycleApproveForMyOrgRequest, opts ...grpc.CallOption) (*LifecycleApproveForMyOrgResponse, error) {
	out := new(LifecycleApproveForMyOrgResponse)
	err := c.cc.Invoke(ctx, ChaincodeService_LifecycleApproveForMyOrg_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeServiceClient) LifecycleCommit(ctx context.Context, in *LifecycleCommitRequest, opts ...grpc.CallOption) (*LifecycleCommitResponse, error) {
	out := new(LifecycleCommitResponse)
	err := c.cc.Invoke(ctx, ChaincodeService_LifecycleCommit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeServiceClient) LifecycleInit(ctx context.Context, in *LifecycleInitRequest, opts ...grpc.CallOption) (*LifecycleInitResponse, error) {
	out := new(LifecycleInitResponse)
	err := c.cc.Invoke(ctx, ChaincodeService_LifecycleInit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeServiceClient) ConfigAnchorList(ctx context.Context, in *ConfigAnchorListRequest, opts ...grpc.CallOption) (*ConfigAnchorListResponse, error) {
	out := new(ConfigAnchorListResponse)
	err := c.cc.Invoke(ctx, ChaincodeService_ConfigAnchorList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeServiceClient) ConfigAnchorModify(ctx context.Context, in *ConfigAnchorModifyRequest, opts ...grpc.CallOption) (*ConfigAnchorModifyResponse, error) {
	out := new(ConfigAnchorModifyResponse)
	err := c.cc.Invoke(ctx, ChaincodeService_ConfigAnchorModify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeServiceClient) ConfigOrderingList(ctx context.Context, in *ConfigOrderingListRequest, opts ...grpc.CallOption) (*ConfigOrderingListResponse, error) {
	out := new(ConfigOrderingListResponse)
	err := c.cc.Invoke(ctx, ChaincodeService_ConfigOrderingList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeServiceClient) ConfigOrderingAdd(ctx context.Context, in *ConfigOrderingAddRequest, opts ...grpc.CallOption) (*ConfigOrderingAddResponse, error) {
	out := new(ConfigOrderingAddResponse)
	err := c.cc.Invoke(ctx, ChaincodeService_ConfigOrderingAdd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeServiceClient) ConfigOrderingUpdate(ctx context.Context, in *ConfigOrderingUpdateRequest, opts ...grpc.CallOption) (*ConfigOrderingUpdateResponse, error) {
	out := new(ConfigOrderingUpdateResponse)
	err := c.cc.Invoke(ctx, ChaincodeService_ConfigOrderingUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeServiceClient) ConfigOrderingDelete(ctx context.Context, in *ConfigOrderingDeleteRequest, opts ...grpc.CallOption) (*ConfigOrderingDeleteResponse, error) {
	out := new(ConfigOrderingDeleteResponse)
	err := c.cc.Invoke(ctx, ChaincodeService_ConfigOrderingDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeServiceClient) ConfigSmartBFTGet(ctx context.Context, in *ConfigSmartBFTGetRequest, opts ...grpc.CallOption) (*ConfigSmartBFTGetResponse, error) {
	out := new(ConfigSmartBFTGetResponse)
	err := c.cc.Invoke(ctx, ChaincodeService_ConfigSmartBFTGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeServiceClient) ConfigSmartBFTSet(ctx context.Context, in *ConfigSmartBFTSetRequest, opts ...grpc.CallOption) (*ConfigSmartBFTSetResponse, error) {
	out := new(ConfigSmartBFTSetResponse)
	err := c.cc.Invoke(ctx, ChaincodeService_ConfigSmartBFTSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeServiceClient) ConfigOrganizationDelete(ctx context.Context, in *ConfigOrganizationDeleteRequest, opts ...grpc.CallOption) (*ConfigOrganizationDeleteResponse, error) {
	out := new(ConfigOrganizationDeleteResponse)
	err := c.cc.Invoke(ctx, ChaincodeService_ConfigOrganizationDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeServiceClient) ConfigGet(ctx context.Context, in *ConfigGetRequest, opts ...grpc.CallOption) (*ConfigGetResponse, error) {
	out := new(ConfigGetResponse)
	err := c.cc.Invoke(ctx, ChaincodeService_ConfigGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeServiceClient) DiscoveryEndorsers(ctx context.Context, in *DiscoveryEndorsersRequest, opts ...grpc.CallOption) (*DiscoveryEndorsersResponse, error) {
	out := new(DiscoveryEndorsersResponse)
	err := c.cc.Invoke(ctx, ChaincodeService_DiscoveryEndorsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeServiceClient) DiscoveryPeers(ctx context.Context, in *DiscoveryPeersRequest, opts ...grpc.CallOption) (*DiscoveryPeersResponse, error) {
	out := new(DiscoveryPeersResponse)
	err := c.cc.Invoke(ctx, ChaincodeService_DiscoveryPeers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeServiceClient) DiscoveryConfig(ctx context.Context, in *DiscoveryConfigRequest, opts ...grpc.CallOption) (*DiscoveryConfigResponse, error) {
	out := new(DiscoveryConfigResponse)
	err := c.cc.Invoke(ctx, ChaincodeService_DiscoveryConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeServiceClient) OrderingJoin(ctx context.Context, in *OrderingRequest, opts ...grpc.CallOption) (*OrderingJoinResponse, error) {
	out := new(OrderingJoinResponse)
	err := c.cc.Invoke(ctx, ChaincodeService_OrderingJoin_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeServiceClient) OrderingListInfo(ctx context.Context, in *OrderingRequest, opts ...grpc.CallOption) (*OrderingListInfoResponse, error) {
	out := new(OrderingListInfoResponse)
	err := c.cc.Invoke(ctx, ChaincodeService_OrderingListInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chaincodeServiceClient) OrderingRemove(ctx context.Context, in *OrderingRequest, opts ...grpc.CallOption) (*OrderingRemoveResponse, error) {
	out := new(OrderingRemoveResponse)
	err := c.cc.Invoke(ctx, ChaincodeService_OrderingRemove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChaincodeServiceServer is the server API for ChaincodeService service.
// All implementations must embed UnimplementedChaincodeServiceServer
// for forward compatibility
type ChaincodeServiceServer interface {
	ChaincodeInstall(context.Context, *ChaincodeInstallRequest) (*ChaincodeInstallResponse, error)
	ChaincodeInstallExternal(context.Context, *ChaincodeInstallExternalRequest) (*ChaincodeInstallResponse, error)
	ChaincodeInstalled(context.Context, *ChaincodeInstalledRequest) (*ChaincodeInstalledResponse, error)
	ChannelJoined(context.Context, *ChannelJoinedRequest) (*ChannelJoinedResponse, error)
	ChannelJoin(context.Context, *ChannelJoinRequest) (*ChannelJoinResponse, error)
	ChannelCreate(context.Context, *ChannelCreateRequest) (*ChannelCreateResponse, error)
	LifecycleStatus(context.Context, *LifecycleStatusRequest) (*LifecycleStatusResponse, error)
	LifecycleApproved(context.Context, *LifecycleApprovedRequest) (*LifecycleApprovedResponse, error)
	LifecycleCheckCommitReadiness(context.Context, *LifecycleCheckCommitReadinessRequest) (*LifecycleCheckCommitReadinessResponse, error)
	LifecycleFull(context.Context, *LifecycleFullRequest) (*LifecycleFullResponse, error)
	LifecycleApproveForMyOrg(context.Context, *LifecycleApproveForMyOrgRequest) (*LifecycleApproveForMyOrgResponse, error)
	LifecycleCommit(context.Context, *LifecycleCommitRequest) (*LifecycleCommitResponse, error)
	LifecycleInit(context.Context, *LifecycleInitRequest) (*LifecycleInitResponse, error)
	ConfigAnchorList(context.Context, *ConfigAnchorListRequest) (*ConfigAnchorListResponse, error)
	ConfigAnchorModify(context.Context, *ConfigAnchorModifyRequest) (*ConfigAnchorModifyResponse, error)
	ConfigOrderingList(context.Context, *ConfigOrderingListRequest) (*ConfigOrderingListResponse, error)
	ConfigOrderingAdd(context.Context, *ConfigOrderingAddRequest) (*ConfigOrderingAddResponse, error)
	ConfigOrderingUpdate(context.Context, *ConfigOrderingUpdateRequest) (*ConfigOrderingUpdateResponse, error)
	ConfigOrderingDelete(context.Context, *ConfigOrderingDeleteRequest) (*ConfigOrderingDeleteResponse, error)
	ConfigSmartBFTGet(context.Context, *ConfigSmartBFTGetRequest) (*ConfigSmartBFTGetResponse, error)
	ConfigSmartBFTSet(context.Context, *ConfigSmartBFTSetRequest) (*ConfigSmartBFTSetResponse, error)
	ConfigOrganizationDelete(context.Context, *ConfigOrganizationDeleteRequest) (*ConfigOrganizationDeleteResponse, error)
	ConfigGet(context.Context, *ConfigGetRequest) (*ConfigGetResponse, error)
	DiscoveryEndorsers(context.Context, *DiscoveryEndorsersRequest) (*DiscoveryEndorsersResponse, error)
	DiscoveryPeers(context.Context, *DiscoveryPeersRequest) (*DiscoveryPeersResponse, error)
	DiscoveryConfig(context.Context, *DiscoveryConfigRequest) (*DiscoveryConfigResponse, error)
	OrderingJoin(context.Context, *OrderingRequest) (*OrderingJoinResponse, error)
	OrderingListInfo(context.Context, *OrderingRequest) (*OrderingListInfoResponse, error)
	OrderingRemove(context.Context, *OrderingRequest) (*OrderingRemoveResponse, error)
	mustEmbedUnimplementedChaincodeServiceServer()
}

// UnimplementedChaincodeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChaincodeServiceServer struct {
}

func (UnimplementedChaincodeServiceServer) ChaincodeInstall(context.Context, *ChaincodeInstallRequest) (*ChaincodeInstallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChaincodeInstall not implemented")
}
func (UnimplementedChaincodeServiceServer) ChaincodeInstallExternal(context.Context, *ChaincodeInstallExternalRequest) (*ChaincodeInstallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChaincodeInstallExternal not implemented")
}
func (UnimplementedChaincodeServiceServer) ChaincodeInstalled(context.Context, *ChaincodeInstalledRequest) (*ChaincodeInstalledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChaincodeInstalled not implemented")
}
func (UnimplementedChaincodeServiceServer) ChannelJoined(context.Context, *ChannelJoinedRequest) (*ChannelJoinedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelJoined not implemented")
}
func (UnimplementedChaincodeServiceServer) ChannelJoin(context.Context, *ChannelJoinRequest) (*ChannelJoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelJoin not implemented")
}
func (UnimplementedChaincodeServiceServer) ChannelCreate(context.Context, *ChannelCreateRequest) (*ChannelCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelCreate not implemented")
}
func (UnimplementedChaincodeServiceServer) LifecycleStatus(context.Context, *LifecycleStatusRequest) (*LifecycleStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LifecycleStatus not implemented")
}
func (UnimplementedChaincodeServiceServer) LifecycleApproved(context.Context, *LifecycleApprovedRequest) (*LifecycleApprovedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LifecycleApproved not implemented")
}
func (UnimplementedChaincodeServiceServer) LifecycleCheckCommitReadiness(context.Context, *LifecycleCheckCommitReadinessRequest) (*LifecycleCheckCommitReadinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LifecycleCheckCommitReadiness not implemented")
}
func (UnimplementedChaincodeServiceServer) LifecycleFull(context.Context, *LifecycleFullRequest) (*LifecycleFullResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LifecycleFull not implemented")
}
func (UnimplementedChaincodeServiceServer) LifecycleApproveForMyOrg(context.Context, *LifecycleApproveForMyOrgRequest) (*LifecycleApproveForMyOrgResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LifecycleApproveForMyOrg not implemented")
}
func (UnimplementedChaincodeServiceServer) LifecycleCommit(context.Context, *LifecycleCommitRequest) (*LifecycleCommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LifecycleCommit not implemented")
}
func (UnimplementedChaincodeServiceServer) LifecycleInit(context.Context, *LifecycleInitRequest) (*LifecycleInitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LifecycleInit not implemented")
}
func (UnimplementedChaincodeServiceServer) ConfigAnchorList(context.Context, *ConfigAnchorListRequest) (*ConfigAnchorListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigAnchorList not implemented")
}
func (UnimplementedChaincodeServiceServer) ConfigAnchorModify(context.Context, *ConfigAnchorModifyRequest) (*ConfigAnchorModifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigAnchorModify not implemented")
}
func (UnimplementedChaincodeServiceServer) ConfigOrderingList(context.Context, *ConfigOrderingListRequest) (*ConfigOrderingListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigOrderingList not implemented")
}
func (UnimplementedChaincodeServiceServer) ConfigOrderingAdd(context.Context, *ConfigOrderingAddRequest) (*ConfigOrderingAddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigOrderingAdd not implemented")
}
func (UnimplementedChaincodeServiceServer) ConfigOrderingUpdate(context.Context, *ConfigOrderingUpdateRequest) (*ConfigOrderingUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigOrderingUpdate not implemented")
}
func (UnimplementedChaincodeServiceServer) ConfigOrderingDelete(context.Context, *ConfigOrderingDeleteRequest) (*ConfigOrderingDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigOrderingDelete not implemented")
}
func (UnimplementedChaincodeServiceServer) ConfigSmartBFTGet(context.Context, *ConfigSmartBFTGetRequest) (*ConfigSmartBFTGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigSmartBFTGet not implemented")
}
func (UnimplementedChaincodeServiceServer) ConfigSmartBFTSet(context.Context, *ConfigSmartBFTSetRequest) (*ConfigSmartBFTSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigSmartBFTSet not implemented")
}
func (UnimplementedChaincodeServiceServer) ConfigOrganizationDelete(context.Context, *ConfigOrganizationDeleteRequest) (*ConfigOrganizationDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigOrganizationDelete not implemented")
}
func (UnimplementedChaincodeServiceServer) ConfigGet(context.Context, *ConfigGetRequest) (*ConfigGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigGet not implemented")
}
func (UnimplementedChaincodeServiceServer) DiscoveryEndorsers(context.Context, *DiscoveryEndorsersRequest) (*DiscoveryEndorsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoveryEndorsers not implemented")
}
func (UnimplementedChaincodeServiceServer) DiscoveryPeers(context.Context, *DiscoveryPeersRequest) (*DiscoveryPeersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoveryPeers not implemented")
}
func (UnimplementedChaincodeServiceServer) DiscoveryConfig(context.Context, *DiscoveryConfigRequest) (*DiscoveryConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoveryConfig not implemented")
}
func (UnimplementedChaincodeServiceServer) OrderingJoin(context.Context, *OrderingRequest) (*OrderingJoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderingJoin not implemented")
}
func (UnimplementedChaincodeServiceServer) OrderingListInfo(context.Context, *OrderingRequest) (*OrderingListInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderingListInfo not implemented")
}
func (UnimplementedChaincodeServiceServer) OrderingRemove(context.Context, *OrderingRequest) (*OrderingRemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderingRemove not implemented")
}
func (UnimplementedChaincodeServiceServer) mustEmbedUnimplementedChaincodeServiceServer() {}

// UnsafeChaincodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChaincodeServiceServer will
// result in compilation errors.
type UnsafeChaincodeServiceServer interface {
	mustEmbedUnimplementedChaincodeServiceServer()
}

func RegisterChaincodeServiceServer(s grpc.ServiceRegistrar, srv ChaincodeServiceServer) {
	s.RegisterService(&ChaincodeService_ServiceDesc, srv)
}

func _ChaincodeService_ChaincodeInstall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChaincodeInstallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeServiceServer).ChaincodeInstall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaincodeService_ChaincodeInstall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeServiceServer).ChaincodeInstall(ctx, req.(*ChaincodeInstallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeService_ChaincodeInstallExternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChaincodeInstallExternalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeServiceServer).ChaincodeInstallExternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaincodeService_ChaincodeInstallExternal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeServiceServer).ChaincodeInstallExternal(ctx, req.(*ChaincodeInstallExternalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeService_ChaincodeInstalled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChaincodeInstalledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeServiceServer).ChaincodeInstalled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaincodeService_ChaincodeInstalled_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeServiceServer).ChaincodeInstalled(ctx, req.(*ChaincodeInstalledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeService_ChannelJoined_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelJoinedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeServiceServer).ChannelJoined(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaincodeService_ChannelJoined_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeServiceServer).ChannelJoined(ctx, req.(*ChannelJoinedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeService_ChannelJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelJoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeServiceServer).ChannelJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaincodeService_ChannelJoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeServiceServer).ChannelJoin(ctx, req.(*ChannelJoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeService_ChannelCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeServiceServer).ChannelCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaincodeService_ChannelCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeServiceServer).ChannelCreate(ctx, req.(*ChannelCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeService_LifecycleStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LifecycleStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeServiceServer).LifecycleStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaincodeService_LifecycleStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeServiceServer).LifecycleStatus(ctx, req.(*LifecycleStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeService_LifecycleApproved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LifecycleApprovedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeServiceServer).LifecycleApproved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaincodeService_LifecycleApproved_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeServiceServer).LifecycleApproved(ctx, req.(*LifecycleApprovedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeService_LifecycleCheckCommitReadiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LifecycleCheckCommitReadinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeServiceServer).LifecycleCheckCommitReadiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaincodeService_LifecycleCheckCommitReadiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeServiceServer).LifecycleCheckCommitReadiness(ctx, req.(*LifecycleCheckCommitReadinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeService_LifecycleFull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LifecycleFullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeServiceServer).LifecycleFull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaincodeService_LifecycleFull_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeServiceServer).LifecycleFull(ctx, req.(*LifecycleFullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeService_LifecycleApproveForMyOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LifecycleApproveForMyOrgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeServiceServer).LifecycleApproveForMyOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaincodeService_LifecycleApproveForMyOrg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeServiceServer).LifecycleApproveForMyOrg(ctx, req.(*LifecycleApproveForMyOrgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeService_LifecycleCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LifecycleCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeServiceServer).LifecycleCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaincodeService_LifecycleCommit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeServiceServer).LifecycleCommit(ctx, req.(*LifecycleCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeService_LifecycleInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LifecycleInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeServiceServer).LifecycleInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaincodeService_LifecycleInit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeServiceServer).LifecycleInit(ctx, req.(*LifecycleInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeService_ConfigAnchorList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigAnchorListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeServiceServer).ConfigAnchorList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaincodeService_ConfigAnchorList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeServiceServer).ConfigAnchorList(ctx, req.(*ConfigAnchorListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeService_ConfigAnchorModify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigAnchorModifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeServiceServer).ConfigAnchorModify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaincodeService_ConfigAnchorModify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeServiceServer).ConfigAnchorModify(ctx, req.(*ConfigAnchorModifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeService_ConfigOrderingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigOrderingListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeServiceServer).ConfigOrderingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaincodeService_ConfigOrderingList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeServiceServer).ConfigOrderingList(ctx, req.(*ConfigOrderingListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeService_ConfigOrderingAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigOrderingAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeServiceServer).ConfigOrderingAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaincodeService_ConfigOrderingAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeServiceServer).ConfigOrderingAdd(ctx, req.(*ConfigOrderingAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeService_ConfigOrderingUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigOrderingUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeServiceServer).ConfigOrderingUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaincodeService_ConfigOrderingUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeServiceServer).ConfigOrderingUpdate(ctx, req.(*ConfigOrderingUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeService_ConfigOrderingDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigOrderingDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeServiceServer).ConfigOrderingDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaincodeService_ConfigOrderingDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeServiceServer).ConfigOrderingDelete(ctx, req.(*ConfigOrderingDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeService_ConfigSmartBFTGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigSmartBFTGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeServiceServer).ConfigSmartBFTGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaincodeService_ConfigSmartBFTGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeServiceServer).ConfigSmartBFTGet(ctx, req.(*ConfigSmartBFTGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeService_ConfigSmartBFTSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigSmartBFTSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeServiceServer).ConfigSmartBFTSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaincodeService_ConfigSmartBFTSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeServiceServer).ConfigSmartBFTSet(ctx, req.(*ConfigSmartBFTSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeService_ConfigOrganizationDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigOrganizationDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeServiceServer).ConfigOrganizationDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaincodeService_ConfigOrganizationDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeServiceServer).ConfigOrganizationDelete(ctx, req.(*ConfigOrganizationDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeService_ConfigGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeServiceServer).ConfigGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaincodeService_ConfigGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeServiceServer).ConfigGet(ctx, req.(*ConfigGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeService_DiscoveryEndorsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoveryEndorsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeServiceServer).DiscoveryEndorsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaincodeService_DiscoveryEndorsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeServiceServer).DiscoveryEndorsers(ctx, req.(*DiscoveryEndorsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeService_DiscoveryPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoveryPeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeServiceServer).DiscoveryPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaincodeService_DiscoveryPeers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeServiceServer).DiscoveryPeers(ctx, req.(*DiscoveryPeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeService_DiscoveryConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoveryConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeServiceServer).DiscoveryConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaincodeService_DiscoveryConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeServiceServer).DiscoveryConfig(ctx, req.(*DiscoveryConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeService_OrderingJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeServiceServer).OrderingJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaincodeService_OrderingJoin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeServiceServer).OrderingJoin(ctx, req.(*OrderingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeService_OrderingListInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeServiceServer).OrderingListInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaincodeService_OrderingListInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeServiceServer).OrderingListInfo(ctx, req.(*OrderingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChaincodeService_OrderingRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChaincodeServiceServer).OrderingRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChaincodeService_OrderingRemove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChaincodeServiceServer).OrderingRemove(ctx, req.(*OrderingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChaincodeService_ServiceDesc is the grpc.ServiceDesc for ChaincodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChaincodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ChaincodeService",
	HandlerType: (*ChaincodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChaincodeInstall",
			Handler:    _ChaincodeService_ChaincodeInstall_Handler,
		},
		{
			MethodName: "ChaincodeInstallExternal",
			Handler:    _ChaincodeService_ChaincodeInstallExternal_Handler,
		},
		{
			MethodName: "ChaincodeInstalled",
			Handler:    _ChaincodeService_ChaincodeInstalled_Handler,
		},
		{
			MethodName: "ChannelJoined",
			Handler:    _ChaincodeService_ChannelJoined_Handler,
		},
		{
			MethodName: "ChannelJoin",
			Handler:    _ChaincodeService_ChannelJoin_Handler,
		},
		{
			MethodName: "ChannelCreate",
			Handler:    _ChaincodeService_ChannelCreate_Handler,
		},
		{
			MethodName: "LifecycleStatus",
			Handler:    _ChaincodeService_LifecycleStatus_Handler,
		},
		{
			MethodName: "LifecycleApproved",
			Handler:    _ChaincodeService_LifecycleApproved_Handler,
		},
		{
			MethodName: "LifecycleCheckCommitReadiness",
			Handler:    _ChaincodeService_LifecycleCheckCommitReadiness_Handler,
		},
		{
			MethodName: "LifecycleFull",
			Handler:    _ChaincodeService_LifecycleFull_Handler,
		},
		{
			MethodName: "LifecycleApproveForMyOrg",
			Handler:    _ChaincodeService_LifecycleApproveForMyOrg_Handler,
		},
		{
			MethodName: "LifecycleCommit",
			Handler:    _ChaincodeService_LifecycleCommit_Handler,
		},
		{
			MethodName: "LifecycleInit",
			Handler:    _ChaincodeService_LifecycleInit_Handler,
		},
		{
			MethodName: "ConfigAnchorList",
			Handler:    _ChaincodeService_ConfigAnchorList_Handler,
		},
		{
			MethodName: "ConfigAnchorModify",
			Handler:    _ChaincodeService_ConfigAnchorModify_Handler,
		},
		{
			MethodName: "ConfigOrderingList",
			Handler:    _ChaincodeService_ConfigOrderingList_Handler,
		},
		{
			MethodName: "ConfigOrderingAdd",
			Handler:    _ChaincodeService_ConfigOrderingAdd_Handler,
		},
		{
			MethodName: "ConfigOrderingUpdate",
			Handler:    _ChaincodeService_ConfigOrderingUpdate_Handler,
		},
		{
			MethodName: "ConfigOrderingDelete",
			Handler:    _ChaincodeService_ConfigOrderingDelete_Handler,
		},
		{
			MethodName: "ConfigSmartBFTGet",
			Handler:    _ChaincodeService_ConfigSmartBFTGet_Handler,
		},
		{
			MethodName: "ConfigSmartBFTSet",
			Handler:    _ChaincodeService_ConfigSmartBFTSet_Handler,
		},
		{
			MethodName: "ConfigOrganizationDelete",
			Handler:    _ChaincodeService_ConfigOrganizationDelete_Handler,
		},
		{
			MethodName: "ConfigGet",
			Handler:    _ChaincodeService_ConfigGet_Handler,
		},
		{
			MethodName: "DiscoveryEndorsers",
			Handler:    _ChaincodeService_DiscoveryEndorsers_Handler,
		},
		{
			MethodName: "DiscoveryPeers",
			Handler:    _ChaincodeService_DiscoveryPeers_Handler,
		},
		{
			MethodName: "DiscoveryConfig",
			Handler:    _ChaincodeService_DiscoveryConfig_Handler,
		},
		{
			MethodName: "OrderingJoin",
			Handler:    _ChaincodeService_OrderingJoin_Handler,
		},
		{
			MethodName: "OrderingListInfo",
			Handler:    _ChaincodeService_OrderingListInfo_Handler,
		},
		{
			MethodName: "OrderingRemove",
			Handler:    _ChaincodeService_OrderingRemove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plane.proto",
}
