// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: discovery.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DiscoveryPeer with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DiscoveryPeer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiscoveryPeer with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DiscoveryPeerMultiError, or
// nil if none found.
func (m *DiscoveryPeer) ValidateAll() error {
	return m.validate(true)
}

func (m *DiscoveryPeer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MspId

	// no validation rules for BlockNumber

	// no validation rules for Host

	// no validation rules for Port

	if all {
		switch v := interface{}(m.GetCert()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiscoveryPeerValidationError{
					field:  "Cert",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiscoveryPeerValidationError{
					field:  "Cert",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCert()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiscoveryPeerValidationError{
				field:  "Cert",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DiscoveryPeerMultiError(errors)
	}

	return nil
}

// DiscoveryPeerMultiError is an error wrapping multiple validation errors
// returned by DiscoveryPeer.ValidateAll() if the designated constraints
// aren't met.
type DiscoveryPeerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiscoveryPeerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiscoveryPeerMultiError) AllErrors() []error { return m }

// DiscoveryPeerValidationError is the validation error returned by
// DiscoveryPeer.Validate if the designated constraints aren't met.
type DiscoveryPeerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscoveryPeerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscoveryPeerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscoveryPeerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscoveryPeerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscoveryPeerValidationError) ErrorName() string { return "DiscoveryPeerValidationError" }

// Error satisfies the builtin error interface
func (e DiscoveryPeerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscoveryPeer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscoveryPeerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscoveryPeerValidationError{}

// Validate checks the field values on DiscoveryEndorsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DiscoveryEndorsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiscoveryEndorsersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DiscoveryEndorsersRequestMultiError, or nil if none found.
func (m *DiscoveryEndorsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DiscoveryEndorsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChannelName

	// no validation rules for ChaincodeName

	if len(errors) > 0 {
		return DiscoveryEndorsersRequestMultiError(errors)
	}

	return nil
}

// DiscoveryEndorsersRequestMultiError is an error wrapping multiple validation
// errors returned by DiscoveryEndorsersRequest.ValidateAll() if the
// designated constraints aren't met.
type DiscoveryEndorsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiscoveryEndorsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiscoveryEndorsersRequestMultiError) AllErrors() []error { return m }

// DiscoveryEndorsersRequestValidationError is the validation error returned by
// DiscoveryEndorsersRequest.Validate if the designated constraints aren't met.
type DiscoveryEndorsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscoveryEndorsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscoveryEndorsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscoveryEndorsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscoveryEndorsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscoveryEndorsersRequestValidationError) ErrorName() string {
	return "DiscoveryEndorsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DiscoveryEndorsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscoveryEndorsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscoveryEndorsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscoveryEndorsersRequestValidationError{}

// Validate checks the field values on DiscoveryEndorsersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DiscoveryEndorsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiscoveryEndorsersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DiscoveryEndorsersResponseMultiError, or nil if none found.
func (m *DiscoveryEndorsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DiscoveryEndorsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DiscoveryEndorsersResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DiscoveryEndorsersResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DiscoveryEndorsersResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DiscoveryEndorsersResponseMultiError(errors)
	}

	return nil
}

// DiscoveryEndorsersResponseMultiError is an error wrapping multiple
// validation errors returned by DiscoveryEndorsersResponse.ValidateAll() if
// the designated constraints aren't met.
type DiscoveryEndorsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiscoveryEndorsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiscoveryEndorsersResponseMultiError) AllErrors() []error { return m }

// DiscoveryEndorsersResponseValidationError is the validation error returned
// by DiscoveryEndorsersResponse.Validate if the designated constraints aren't met.
type DiscoveryEndorsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscoveryEndorsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscoveryEndorsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscoveryEndorsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscoveryEndorsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscoveryEndorsersResponseValidationError) ErrorName() string {
	return "DiscoveryEndorsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DiscoveryEndorsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscoveryEndorsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscoveryEndorsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscoveryEndorsersResponseValidationError{}

// Validate checks the field values on DiscoveryPeersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DiscoveryPeersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiscoveryPeersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DiscoveryPeersRequestMultiError, or nil if none found.
func (m *DiscoveryPeersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DiscoveryPeersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChannelName

	if len(errors) > 0 {
		return DiscoveryPeersRequestMultiError(errors)
	}

	return nil
}

// DiscoveryPeersRequestMultiError is an error wrapping multiple validation
// errors returned by DiscoveryPeersRequest.ValidateAll() if the designated
// constraints aren't met.
type DiscoveryPeersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiscoveryPeersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiscoveryPeersRequestMultiError) AllErrors() []error { return m }

// DiscoveryPeersRequestValidationError is the validation error returned by
// DiscoveryPeersRequest.Validate if the designated constraints aren't met.
type DiscoveryPeersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscoveryPeersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscoveryPeersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscoveryPeersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscoveryPeersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscoveryPeersRequestValidationError) ErrorName() string {
	return "DiscoveryPeersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DiscoveryPeersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscoveryPeersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscoveryPeersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscoveryPeersRequestValidationError{}

// Validate checks the field values on DiscoveryPeersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DiscoveryPeersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiscoveryPeersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DiscoveryPeersResponseMultiError, or nil if none found.
func (m *DiscoveryPeersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DiscoveryPeersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DiscoveryPeersResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DiscoveryPeersResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DiscoveryPeersResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DiscoveryPeersResponseMultiError(errors)
	}

	return nil
}

// DiscoveryPeersResponseMultiError is an error wrapping multiple validation
// errors returned by DiscoveryPeersResponse.ValidateAll() if the designated
// constraints aren't met.
type DiscoveryPeersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiscoveryPeersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiscoveryPeersResponseMultiError) AllErrors() []error { return m }

// DiscoveryPeersResponseValidationError is the validation error returned by
// DiscoveryPeersResponse.Validate if the designated constraints aren't met.
type DiscoveryPeersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscoveryPeersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscoveryPeersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscoveryPeersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscoveryPeersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscoveryPeersResponseValidationError) ErrorName() string {
	return "DiscoveryPeersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DiscoveryPeersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscoveryPeersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscoveryPeersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscoveryPeersResponseValidationError{}

// Validate checks the field values on DiscoveryConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DiscoveryConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiscoveryConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DiscoveryConfigRequestMultiError, or nil if none found.
func (m *DiscoveryConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DiscoveryConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChannelName

	if len(errors) > 0 {
		return DiscoveryConfigRequestMultiError(errors)
	}

	return nil
}

// DiscoveryConfigRequestMultiError is an error wrapping multiple validation
// errors returned by DiscoveryConfigRequest.ValidateAll() if the designated
// constraints aren't met.
type DiscoveryConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiscoveryConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiscoveryConfigRequestMultiError) AllErrors() []error { return m }

// DiscoveryConfigRequestValidationError is the validation error returned by
// DiscoveryConfigRequest.Validate if the designated constraints aren't met.
type DiscoveryConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscoveryConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscoveryConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscoveryConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscoveryConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscoveryConfigRequestValidationError) ErrorName() string {
	return "DiscoveryConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DiscoveryConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscoveryConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscoveryConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscoveryConfigRequestValidationError{}

// Validate checks the field values on DiscoveryConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DiscoveryConfigResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiscoveryConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DiscoveryConfigResponseMultiError, or nil if none found.
func (m *DiscoveryConfigResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DiscoveryConfigResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetResult()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiscoveryConfigResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiscoveryConfigResponseValidationError{
					field:  "Result",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResult()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiscoveryConfigResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DiscoveryConfigResponseMultiError(errors)
	}

	return nil
}

// DiscoveryConfigResponseMultiError is an error wrapping multiple validation
// errors returned by DiscoveryConfigResponse.ValidateAll() if the designated
// constraints aren't met.
type DiscoveryConfigResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiscoveryConfigResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiscoveryConfigResponseMultiError) AllErrors() []error { return m }

// DiscoveryConfigResponseValidationError is the validation error returned by
// DiscoveryConfigResponse.Validate if the designated constraints aren't met.
type DiscoveryConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscoveryConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscoveryConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscoveryConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscoveryConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscoveryConfigResponseValidationError) ErrorName() string {
	return "DiscoveryConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DiscoveryConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscoveryConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscoveryConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscoveryConfigResponseValidationError{}

// Validate checks the field values on DiscoveryPeer_Certificate with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DiscoveryPeer_Certificate) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiscoveryPeer_Certificate with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DiscoveryPeer_CertificateMultiError, or nil if none found.
func (m *DiscoveryPeer_Certificate) ValidateAll() error {
	return m.validate(true)
}

func (m *DiscoveryPeer_Certificate) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Raw

	// no validation rules for Ski

	if all {
		switch v := interface{}(m.GetDateExpire()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiscoveryPeer_CertificateValidationError{
					field:  "DateExpire",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiscoveryPeer_CertificateValidationError{
					field:  "DateExpire",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDateExpire()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiscoveryPeer_CertificateValidationError{
				field:  "DateExpire",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DiscoveryPeer_CertificateMultiError(errors)
	}

	return nil
}

// DiscoveryPeer_CertificateMultiError is an error wrapping multiple validation
// errors returned by DiscoveryPeer_Certificate.ValidateAll() if the
// designated constraints aren't met.
type DiscoveryPeer_CertificateMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiscoveryPeer_CertificateMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiscoveryPeer_CertificateMultiError) AllErrors() []error { return m }

// DiscoveryPeer_CertificateValidationError is the validation error returned by
// DiscoveryPeer_Certificate.Validate if the designated constraints aren't met.
type DiscoveryPeer_CertificateValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscoveryPeer_CertificateValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscoveryPeer_CertificateValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscoveryPeer_CertificateValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscoveryPeer_CertificateValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscoveryPeer_CertificateValidationError) ErrorName() string {
	return "DiscoveryPeer_CertificateValidationError"
}

// Error satisfies the builtin error interface
func (e DiscoveryPeer_CertificateValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscoveryPeer_Certificate.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscoveryPeer_CertificateValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscoveryPeer_CertificateValidationError{}
