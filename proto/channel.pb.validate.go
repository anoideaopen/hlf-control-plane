// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: channel.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ChannelJoinedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChannelJoinedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChannelJoinedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChannelJoinedResponseMultiError, or nil if none found.
func (m *ChannelJoinedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChannelJoinedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChannelJoinedResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChannelJoinedResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChannelJoinedResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChannelJoinedResponseMultiError(errors)
	}

	return nil
}

// ChannelJoinedResponseMultiError is an error wrapping multiple validation
// errors returned by ChannelJoinedResponse.ValidateAll() if the designated
// constraints aren't met.
type ChannelJoinedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChannelJoinedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChannelJoinedResponseMultiError) AllErrors() []error { return m }

// ChannelJoinedResponseValidationError is the validation error returned by
// ChannelJoinedResponse.Validate if the designated constraints aren't met.
type ChannelJoinedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelJoinedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelJoinedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelJoinedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelJoinedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelJoinedResponseValidationError) ErrorName() string {
	return "ChannelJoinedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChannelJoinedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannelJoinedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelJoinedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelJoinedResponseValidationError{}

// Validate checks the field values on ChannelJoinRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChannelJoinRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChannelJoinRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChannelJoinRequestMultiError, or nil if none found.
func (m *ChannelJoinRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ChannelJoinRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChannelName

	if all {
		switch v := interface{}(m.GetOrderer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ChannelJoinRequestValidationError{
					field:  "Orderer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ChannelJoinRequestValidationError{
					field:  "Orderer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrderer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChannelJoinRequestValidationError{
				field:  "Orderer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ChannelJoinRequestMultiError(errors)
	}

	return nil
}

// ChannelJoinRequestMultiError is an error wrapping multiple validation errors
// returned by ChannelJoinRequest.ValidateAll() if the designated constraints
// aren't met.
type ChannelJoinRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChannelJoinRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChannelJoinRequestMultiError) AllErrors() []error { return m }

// ChannelJoinRequestValidationError is the validation error returned by
// ChannelJoinRequest.Validate if the designated constraints aren't met.
type ChannelJoinRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelJoinRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelJoinRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelJoinRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelJoinRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelJoinRequestValidationError) ErrorName() string {
	return "ChannelJoinRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChannelJoinRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannelJoinRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelJoinRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelJoinRequestValidationError{}

// Validate checks the field values on ChannelJoinResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChannelJoinResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChannelJoinResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChannelJoinResponseMultiError, or nil if none found.
func (m *ChannelJoinResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ChannelJoinResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChannelJoinResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChannelJoinResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChannelJoinResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChannelJoinResponseMultiError(errors)
	}

	return nil
}

// ChannelJoinResponseMultiError is an error wrapping multiple validation
// errors returned by ChannelJoinResponse.ValidateAll() if the designated
// constraints aren't met.
type ChannelJoinResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChannelJoinResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChannelJoinResponseMultiError) AllErrors() []error { return m }

// ChannelJoinResponseValidationError is the validation error returned by
// ChannelJoinResponse.Validate if the designated constraints aren't met.
type ChannelJoinResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelJoinResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelJoinResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelJoinResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelJoinResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelJoinResponseValidationError) ErrorName() string {
	return "ChannelJoinResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChannelJoinResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannelJoinResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelJoinResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelJoinResponseValidationError{}

// Validate checks the field values on ChannelJoinedResponse_Result with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChannelJoinedResponse_Result) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChannelJoinedResponse_Result with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChannelJoinedResponse_ResultMultiError, or nil if none found.
func (m *ChannelJoinedResponse_Result) ValidateAll() error {
	return m.validate(true)
}

func (m *ChannelJoinedResponse_Result) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	for idx, item := range m.GetPeers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChannelJoinedResponse_ResultValidationError{
						field:  fmt.Sprintf("Peers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChannelJoinedResponse_ResultValidationError{
						field:  fmt.Sprintf("Peers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChannelJoinedResponse_ResultValidationError{
					field:  fmt.Sprintf("Peers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChannelJoinedResponse_ResultMultiError(errors)
	}

	return nil
}

// ChannelJoinedResponse_ResultMultiError is an error wrapping multiple
// validation errors returned by ChannelJoinedResponse_Result.ValidateAll() if
// the designated constraints aren't met.
type ChannelJoinedResponse_ResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChannelJoinedResponse_ResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChannelJoinedResponse_ResultMultiError) AllErrors() []error { return m }

// ChannelJoinedResponse_ResultValidationError is the validation error returned
// by ChannelJoinedResponse_Result.Validate if the designated constraints
// aren't met.
type ChannelJoinedResponse_ResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelJoinedResponse_ResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelJoinedResponse_ResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelJoinedResponse_ResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelJoinedResponse_ResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelJoinedResponse_ResultValidationError) ErrorName() string {
	return "ChannelJoinedResponse_ResultValidationError"
}

// Error satisfies the builtin error interface
func (e ChannelJoinedResponse_ResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannelJoinedResponse_Result.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelJoinedResponse_ResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelJoinedResponse_ResultValidationError{}

// Validate checks the field values on ChannelJoinedResponse_PeerResult with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ChannelJoinedResponse_PeerResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChannelJoinedResponse_PeerResult with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ChannelJoinedResponse_PeerResultMultiError, or nil if none found.
func (m *ChannelJoinedResponse_PeerResult) ValidateAll() error {
	return m.validate(true)
}

func (m *ChannelJoinedResponse_PeerResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Peer

	// no validation rules for BlockNumber

	// no validation rules for BlockHash

	// no validation rules for PrevBlockHash

	if len(errors) > 0 {
		return ChannelJoinedResponse_PeerResultMultiError(errors)
	}

	return nil
}

// ChannelJoinedResponse_PeerResultMultiError is an error wrapping multiple
// validation errors returned by
// ChannelJoinedResponse_PeerResult.ValidateAll() if the designated
// constraints aren't met.
type ChannelJoinedResponse_PeerResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChannelJoinedResponse_PeerResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChannelJoinedResponse_PeerResultMultiError) AllErrors() []error { return m }

// ChannelJoinedResponse_PeerResultValidationError is the validation error
// returned by ChannelJoinedResponse_PeerResult.Validate if the designated
// constraints aren't met.
type ChannelJoinedResponse_PeerResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelJoinedResponse_PeerResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelJoinedResponse_PeerResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelJoinedResponse_PeerResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelJoinedResponse_PeerResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelJoinedResponse_PeerResultValidationError) ErrorName() string {
	return "ChannelJoinedResponse_PeerResultValidationError"
}

// Error satisfies the builtin error interface
func (e ChannelJoinedResponse_PeerResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannelJoinedResponse_PeerResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelJoinedResponse_PeerResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelJoinedResponse_PeerResultValidationError{}

// Validate checks the field values on ChannelJoinRequest_Orderer with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChannelJoinRequest_Orderer) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChannelJoinRequest_Orderer with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChannelJoinRequest_OrdererMultiError, or nil if none found.
func (m *ChannelJoinRequest_Orderer) ValidateAll() error {
	return m.validate(true)
}

func (m *ChannelJoinRequest_Orderer) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Host

	// no validation rules for Port

	if len(errors) > 0 {
		return ChannelJoinRequest_OrdererMultiError(errors)
	}

	return nil
}

// ChannelJoinRequest_OrdererMultiError is an error wrapping multiple
// validation errors returned by ChannelJoinRequest_Orderer.ValidateAll() if
// the designated constraints aren't met.
type ChannelJoinRequest_OrdererMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChannelJoinRequest_OrdererMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChannelJoinRequest_OrdererMultiError) AllErrors() []error { return m }

// ChannelJoinRequest_OrdererValidationError is the validation error returned
// by ChannelJoinRequest_Orderer.Validate if the designated constraints aren't met.
type ChannelJoinRequest_OrdererValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelJoinRequest_OrdererValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelJoinRequest_OrdererValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelJoinRequest_OrdererValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelJoinRequest_OrdererValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelJoinRequest_OrdererValidationError) ErrorName() string {
	return "ChannelJoinRequest_OrdererValidationError"
}

// Error satisfies the builtin error interface
func (e ChannelJoinRequest_OrdererValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannelJoinRequest_Orderer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelJoinRequest_OrdererValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelJoinRequest_OrdererValidationError{}

// Validate checks the field values on ChannelJoinResponse_PeerResult with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChannelJoinResponse_PeerResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChannelJoinResponse_PeerResult with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ChannelJoinResponse_PeerResultMultiError, or nil if none found.
func (m *ChannelJoinResponse_PeerResult) ValidateAll() error {
	return m.validate(true)
}

func (m *ChannelJoinResponse_PeerResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Peer

	switch v := m.Result.(type) {
	case *ChannelJoinResponse_PeerResult_Existed:
		if v == nil {
			err := ChannelJoinResponse_PeerResultValidationError{
				field:  "Result",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Existed
	case *ChannelJoinResponse_PeerResult_Err:
		if v == nil {
			err := ChannelJoinResponse_PeerResultValidationError{
				field:  "Result",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Err
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ChannelJoinResponse_PeerResultMultiError(errors)
	}

	return nil
}

// ChannelJoinResponse_PeerResultMultiError is an error wrapping multiple
// validation errors returned by ChannelJoinResponse_PeerResult.ValidateAll()
// if the designated constraints aren't met.
type ChannelJoinResponse_PeerResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChannelJoinResponse_PeerResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChannelJoinResponse_PeerResultMultiError) AllErrors() []error { return m }

// ChannelJoinResponse_PeerResultValidationError is the validation error
// returned by ChannelJoinResponse_PeerResult.Validate if the designated
// constraints aren't met.
type ChannelJoinResponse_PeerResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelJoinResponse_PeerResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelJoinResponse_PeerResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelJoinResponse_PeerResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelJoinResponse_PeerResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelJoinResponse_PeerResultValidationError) ErrorName() string {
	return "ChannelJoinResponse_PeerResultValidationError"
}

// Error satisfies the builtin error interface
func (e ChannelJoinResponse_PeerResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannelJoinResponse_PeerResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelJoinResponse_PeerResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelJoinResponse_PeerResultValidationError{}
