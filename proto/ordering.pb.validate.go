// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ordering.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on OrderingRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *OrderingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderingRequestMultiError, or nil if none found.
func (m *OrderingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Host

	// no validation rules for Port

	// no validation rules for ChannelName

	for idx, item := range m.GetJoinedOrderer() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrderingRequestValidationError{
						field:  fmt.Sprintf("JoinedOrderer[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrderingRequestValidationError{
						field:  fmt.Sprintf("JoinedOrderer[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrderingRequestValidationError{
					field:  fmt.Sprintf("JoinedOrderer[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OrderingRequestMultiError(errors)
	}

	return nil
}

// OrderingRequestMultiError is an error wrapping multiple validation errors
// returned by OrderingRequest.ValidateAll() if the designated constraints
// aren't met.
type OrderingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderingRequestMultiError) AllErrors() []error { return m }

// OrderingRequestValidationError is the validation error returned by
// OrderingRequest.Validate if the designated constraints aren't met.
type OrderingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderingRequestValidationError) ErrorName() string { return "OrderingRequestValidationError" }

// Error satisfies the builtin error interface
func (e OrderingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderingRequestValidationError{}

// Validate checks the field values on OrderingRemoveResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrderingRemoveResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderingRemoveResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderingRemoveResponseMultiError, or nil if none found.
func (m *OrderingRemoveResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderingRemoveResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return OrderingRemoveResponseMultiError(errors)
	}

	return nil
}

// OrderingRemoveResponseMultiError is an error wrapping multiple validation
// errors returned by OrderingRemoveResponse.ValidateAll() if the designated
// constraints aren't met.
type OrderingRemoveResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderingRemoveResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderingRemoveResponseMultiError) AllErrors() []error { return m }

// OrderingRemoveResponseValidationError is the validation error returned by
// OrderingRemoveResponse.Validate if the designated constraints aren't met.
type OrderingRemoveResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderingRemoveResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderingRemoveResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderingRemoveResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderingRemoveResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderingRemoveResponseValidationError) ErrorName() string {
	return "OrderingRemoveResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OrderingRemoveResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderingRemoveResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderingRemoveResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderingRemoveResponseValidationError{}

// Validate checks the field values on OrderingJoinResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrderingJoinResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderingJoinResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderingJoinResponseMultiError, or nil if none found.
func (m *OrderingJoinResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderingJoinResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Exists

	if len(errors) > 0 {
		return OrderingJoinResponseMultiError(errors)
	}

	return nil
}

// OrderingJoinResponseMultiError is an error wrapping multiple validation
// errors returned by OrderingJoinResponse.ValidateAll() if the designated
// constraints aren't met.
type OrderingJoinResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderingJoinResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderingJoinResponseMultiError) AllErrors() []error { return m }

// OrderingJoinResponseValidationError is the validation error returned by
// OrderingJoinResponse.Validate if the designated constraints aren't met.
type OrderingJoinResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderingJoinResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderingJoinResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderingJoinResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderingJoinResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderingJoinResponseValidationError) ErrorName() string {
	return "OrderingJoinResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OrderingJoinResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderingJoinResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderingJoinResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderingJoinResponseValidationError{}

// Validate checks the field values on OrderingListInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrderingListInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderingListInfoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderingListInfoResponseMultiError, or nil if none found.
func (m *OrderingListInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderingListInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetInfo() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OrderingListInfoResponseValidationError{
						field:  fmt.Sprintf("Info[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OrderingListInfoResponseValidationError{
						field:  fmt.Sprintf("Info[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OrderingListInfoResponseValidationError{
					field:  fmt.Sprintf("Info[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OrderingListInfoResponseMultiError(errors)
	}

	return nil
}

// OrderingListInfoResponseMultiError is an error wrapping multiple validation
// errors returned by OrderingListInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type OrderingListInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderingListInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderingListInfoResponseMultiError) AllErrors() []error { return m }

// OrderingListInfoResponseValidationError is the validation error returned by
// OrderingListInfoResponse.Validate if the designated constraints aren't met.
type OrderingListInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderingListInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderingListInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderingListInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderingListInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderingListInfoResponseValidationError) ErrorName() string {
	return "OrderingListInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OrderingListInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderingListInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderingListInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderingListInfoResponseValidationError{}

// Validate checks the field values on OrderingRequest_Joined with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrderingRequest_Joined) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderingRequest_Joined with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrderingRequest_JoinedMultiError, or nil if none found.
func (m *OrderingRequest_Joined) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderingRequest_Joined) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Host

	// no validation rules for Port

	if len(errors) > 0 {
		return OrderingRequest_JoinedMultiError(errors)
	}

	return nil
}

// OrderingRequest_JoinedMultiError is an error wrapping multiple validation
// errors returned by OrderingRequest_Joined.ValidateAll() if the designated
// constraints aren't met.
type OrderingRequest_JoinedMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderingRequest_JoinedMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderingRequest_JoinedMultiError) AllErrors() []error { return m }

// OrderingRequest_JoinedValidationError is the validation error returned by
// OrderingRequest_Joined.Validate if the designated constraints aren't met.
type OrderingRequest_JoinedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderingRequest_JoinedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderingRequest_JoinedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderingRequest_JoinedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderingRequest_JoinedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderingRequest_JoinedValidationError) ErrorName() string {
	return "OrderingRequest_JoinedValidationError"
}

// Error satisfies the builtin error interface
func (e OrderingRequest_JoinedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderingRequest_Joined.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderingRequest_JoinedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderingRequest_JoinedValidationError{}

// Validate checks the field values on OrderingListInfoResponse_ChannelInfo
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *OrderingListInfoResponse_ChannelInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrderingListInfoResponse_ChannelInfo
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// OrderingListInfoResponse_ChannelInfoMultiError, or nil if none found.
func (m *OrderingListInfoResponse_ChannelInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *OrderingListInfoResponse_ChannelInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Status

	// no validation rules for ConsensusRelation

	// no validation rules for Height

	if len(errors) > 0 {
		return OrderingListInfoResponse_ChannelInfoMultiError(errors)
	}

	return nil
}

// OrderingListInfoResponse_ChannelInfoMultiError is an error wrapping multiple
// validation errors returned by
// OrderingListInfoResponse_ChannelInfo.ValidateAll() if the designated
// constraints aren't met.
type OrderingListInfoResponse_ChannelInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderingListInfoResponse_ChannelInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderingListInfoResponse_ChannelInfoMultiError) AllErrors() []error { return m }

// OrderingListInfoResponse_ChannelInfoValidationError is the validation error
// returned by OrderingListInfoResponse_ChannelInfo.Validate if the designated
// constraints aren't met.
type OrderingListInfoResponse_ChannelInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderingListInfoResponse_ChannelInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderingListInfoResponse_ChannelInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderingListInfoResponse_ChannelInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderingListInfoResponse_ChannelInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderingListInfoResponse_ChannelInfoValidationError) ErrorName() string {
	return "OrderingListInfoResponse_ChannelInfoValidationError"
}

// Error satisfies the builtin error interface
func (e OrderingListInfoResponse_ChannelInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrderingListInfoResponse_ChannelInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderingListInfoResponse_ChannelInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderingListInfoResponse_ChannelInfoValidationError{}
