// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: config.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ConfigAnchorListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigAnchorListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigAnchorListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigAnchorListRequestMultiError, or nil if none found.
func (m *ConfigAnchorListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigAnchorListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChannelName

	if len(errors) > 0 {
		return ConfigAnchorListRequestMultiError(errors)
	}

	return nil
}

// ConfigAnchorListRequestMultiError is an error wrapping multiple validation
// errors returned by ConfigAnchorListRequest.ValidateAll() if the designated
// constraints aren't met.
type ConfigAnchorListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigAnchorListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigAnchorListRequestMultiError) AllErrors() []error { return m }

// ConfigAnchorListRequestValidationError is the validation error returned by
// ConfigAnchorListRequest.Validate if the designated constraints aren't met.
type ConfigAnchorListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigAnchorListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigAnchorListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigAnchorListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigAnchorListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigAnchorListRequestValidationError) ErrorName() string {
	return "ConfigAnchorListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigAnchorListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigAnchorListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigAnchorListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigAnchorListRequestValidationError{}

// Validate checks the field values on ConfigAnchorListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigAnchorListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigAnchorListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigAnchorListResponseMultiError, or nil if none found.
func (m *ConfigAnchorListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigAnchorListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigAnchorListResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigAnchorListResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigAnchorListResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ConfigAnchorListResponseMultiError(errors)
	}

	return nil
}

// ConfigAnchorListResponseMultiError is an error wrapping multiple validation
// errors returned by ConfigAnchorListResponse.ValidateAll() if the designated
// constraints aren't met.
type ConfigAnchorListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigAnchorListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigAnchorListResponseMultiError) AllErrors() []error { return m }

// ConfigAnchorListResponseValidationError is the validation error returned by
// ConfigAnchorListResponse.Validate if the designated constraints aren't met.
type ConfigAnchorListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigAnchorListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigAnchorListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigAnchorListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigAnchorListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigAnchorListResponseValidationError) ErrorName() string {
	return "ConfigAnchorListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigAnchorListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigAnchorListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigAnchorListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigAnchorListResponseValidationError{}

// Validate checks the field values on ConfigAnchorModifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigAnchorModifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigAnchorModifyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigAnchorModifyRequestMultiError, or nil if none found.
func (m *ConfigAnchorModifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigAnchorModifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChannelName

	if all {
		switch v := interface{}(m.GetOrderer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigAnchorModifyRequestValidationError{
					field:  "Orderer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigAnchorModifyRequestValidationError{
					field:  "Orderer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrderer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigAnchorModifyRequestValidationError{
				field:  "Orderer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetPeers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigAnchorModifyRequestValidationError{
						field:  fmt.Sprintf("Peers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigAnchorModifyRequestValidationError{
						field:  fmt.Sprintf("Peers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigAnchorModifyRequestValidationError{
					field:  fmt.Sprintf("Peers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ConfigAnchorModifyRequestMultiError(errors)
	}

	return nil
}

// ConfigAnchorModifyRequestMultiError is an error wrapping multiple validation
// errors returned by ConfigAnchorModifyRequest.ValidateAll() if the
// designated constraints aren't met.
type ConfigAnchorModifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigAnchorModifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigAnchorModifyRequestMultiError) AllErrors() []error { return m }

// ConfigAnchorModifyRequestValidationError is the validation error returned by
// ConfigAnchorModifyRequest.Validate if the designated constraints aren't met.
type ConfigAnchorModifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigAnchorModifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigAnchorModifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigAnchorModifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigAnchorModifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigAnchorModifyRequestValidationError) ErrorName() string {
	return "ConfigAnchorModifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigAnchorModifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigAnchorModifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigAnchorModifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigAnchorModifyRequestValidationError{}

// Validate checks the field values on ConfigAnchorModifyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigAnchorModifyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigAnchorModifyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigAnchorModifyResponseMultiError, or nil if none found.
func (m *ConfigAnchorModifyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigAnchorModifyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNew() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigAnchorModifyResponseValidationError{
						field:  fmt.Sprintf("New[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigAnchorModifyResponseValidationError{
						field:  fmt.Sprintf("New[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigAnchorModifyResponseValidationError{
					field:  fmt.Sprintf("New[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetExisted() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigAnchorModifyResponseValidationError{
						field:  fmt.Sprintf("Existed[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigAnchorModifyResponseValidationError{
						field:  fmt.Sprintf("Existed[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigAnchorModifyResponseValidationError{
					field:  fmt.Sprintf("Existed[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDeleted() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigAnchorModifyResponseValidationError{
						field:  fmt.Sprintf("Deleted[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigAnchorModifyResponseValidationError{
						field:  fmt.Sprintf("Deleted[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigAnchorModifyResponseValidationError{
					field:  fmt.Sprintf("Deleted[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ConfigAnchorModifyResponseMultiError(errors)
	}

	return nil
}

// ConfigAnchorModifyResponseMultiError is an error wrapping multiple
// validation errors returned by ConfigAnchorModifyResponse.ValidateAll() if
// the designated constraints aren't met.
type ConfigAnchorModifyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigAnchorModifyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigAnchorModifyResponseMultiError) AllErrors() []error { return m }

// ConfigAnchorModifyResponseValidationError is the validation error returned
// by ConfigAnchorModifyResponse.Validate if the designated constraints aren't met.
type ConfigAnchorModifyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigAnchorModifyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigAnchorModifyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigAnchorModifyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigAnchorModifyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigAnchorModifyResponseValidationError) ErrorName() string {
	return "ConfigAnchorModifyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigAnchorModifyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigAnchorModifyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigAnchorModifyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigAnchorModifyResponseValidationError{}

// Validate checks the field values on ConfigOrderingListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigOrderingListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigOrderingListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigOrderingListRequestMultiError, or nil if none found.
func (m *ConfigOrderingListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigOrderingListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChannelName

	if len(errors) > 0 {
		return ConfigOrderingListRequestMultiError(errors)
	}

	return nil
}

// ConfigOrderingListRequestMultiError is an error wrapping multiple validation
// errors returned by ConfigOrderingListRequest.ValidateAll() if the
// designated constraints aren't met.
type ConfigOrderingListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigOrderingListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigOrderingListRequestMultiError) AllErrors() []error { return m }

// ConfigOrderingListRequestValidationError is the validation error returned by
// ConfigOrderingListRequest.Validate if the designated constraints aren't met.
type ConfigOrderingListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigOrderingListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigOrderingListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigOrderingListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigOrderingListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigOrderingListRequestValidationError) ErrorName() string {
	return "ConfigOrderingListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigOrderingListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigOrderingListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigOrderingListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigOrderingListRequestValidationError{}

// Validate checks the field values on ConfigOrderingListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigOrderingListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigOrderingListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigOrderingListResponseMultiError, or nil if none found.
func (m *ConfigOrderingListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigOrderingListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrderers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigOrderingListResponseValidationError{
						field:  fmt.Sprintf("Orderers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigOrderingListResponseValidationError{
						field:  fmt.Sprintf("Orderers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigOrderingListResponseValidationError{
					field:  fmt.Sprintf("Orderers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Consensus

	if len(errors) > 0 {
		return ConfigOrderingListResponseMultiError(errors)
	}

	return nil
}

// ConfigOrderingListResponseMultiError is an error wrapping multiple
// validation errors returned by ConfigOrderingListResponse.ValidateAll() if
// the designated constraints aren't met.
type ConfigOrderingListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigOrderingListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigOrderingListResponseMultiError) AllErrors() []error { return m }

// ConfigOrderingListResponseValidationError is the validation error returned
// by ConfigOrderingListResponse.Validate if the designated constraints aren't met.
type ConfigOrderingListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigOrderingListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigOrderingListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigOrderingListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigOrderingListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigOrderingListResponseValidationError) ErrorName() string {
	return "ConfigOrderingListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigOrderingListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigOrderingListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigOrderingListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigOrderingListResponseValidationError{}

// Validate checks the field values on ConfigOrderingAddRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigOrderingAddRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigOrderingAddRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigOrderingAddRequestMultiError, or nil if none found.
func (m *ConfigOrderingAddRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigOrderingAddRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChannelName

	if all {
		switch v := interface{}(m.GetOrderer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigOrderingAddRequestValidationError{
					field:  "Orderer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigOrderingAddRequestValidationError{
					field:  "Orderer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrderer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigOrderingAddRequestValidationError{
				field:  "Orderer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConfigOrderingAddRequestMultiError(errors)
	}

	return nil
}

// ConfigOrderingAddRequestMultiError is an error wrapping multiple validation
// errors returned by ConfigOrderingAddRequest.ValidateAll() if the designated
// constraints aren't met.
type ConfigOrderingAddRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigOrderingAddRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigOrderingAddRequestMultiError) AllErrors() []error { return m }

// ConfigOrderingAddRequestValidationError is the validation error returned by
// ConfigOrderingAddRequest.Validate if the designated constraints aren't met.
type ConfigOrderingAddRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigOrderingAddRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigOrderingAddRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigOrderingAddRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigOrderingAddRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigOrderingAddRequestValidationError) ErrorName() string {
	return "ConfigOrderingAddRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigOrderingAddRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigOrderingAddRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigOrderingAddRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigOrderingAddRequestValidationError{}

// Validate checks the field values on ConfigOrderingUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigOrderingUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigOrderingUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigOrderingUpdateRequestMultiError, or nil if none found.
func (m *ConfigOrderingUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigOrderingUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChannelName

	if all {
		switch v := interface{}(m.GetOrderer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigOrderingUpdateRequestValidationError{
					field:  "Orderer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigOrderingUpdateRequestValidationError{
					field:  "Orderer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrderer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigOrderingUpdateRequestValidationError{
				field:  "Orderer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConfigOrderingUpdateRequestMultiError(errors)
	}

	return nil
}

// ConfigOrderingUpdateRequestMultiError is an error wrapping multiple
// validation errors returned by ConfigOrderingUpdateRequest.ValidateAll() if
// the designated constraints aren't met.
type ConfigOrderingUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigOrderingUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigOrderingUpdateRequestMultiError) AllErrors() []error { return m }

// ConfigOrderingUpdateRequestValidationError is the validation error returned
// by ConfigOrderingUpdateRequest.Validate if the designated constraints
// aren't met.
type ConfigOrderingUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigOrderingUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigOrderingUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigOrderingUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigOrderingUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigOrderingUpdateRequestValidationError) ErrorName() string {
	return "ConfigOrderingUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigOrderingUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigOrderingUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigOrderingUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigOrderingUpdateRequestValidationError{}

// Validate checks the field values on ConfigOrderingDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigOrderingDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigOrderingDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigOrderingDeleteRequestMultiError, or nil if none found.
func (m *ConfigOrderingDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigOrderingDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChannelName

	if all {
		switch v := interface{}(m.GetOrderer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigOrderingDeleteRequestValidationError{
					field:  "Orderer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigOrderingDeleteRequestValidationError{
					field:  "Orderer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrderer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigOrderingDeleteRequestValidationError{
				field:  "Orderer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConfigOrderingDeleteRequestMultiError(errors)
	}

	return nil
}

// ConfigOrderingDeleteRequestMultiError is an error wrapping multiple
// validation errors returned by ConfigOrderingDeleteRequest.ValidateAll() if
// the designated constraints aren't met.
type ConfigOrderingDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigOrderingDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigOrderingDeleteRequestMultiError) AllErrors() []error { return m }

// ConfigOrderingDeleteRequestValidationError is the validation error returned
// by ConfigOrderingDeleteRequest.Validate if the designated constraints
// aren't met.
type ConfigOrderingDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigOrderingDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigOrderingDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigOrderingDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigOrderingDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigOrderingDeleteRequestValidationError) ErrorName() string {
	return "ConfigOrderingDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigOrderingDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigOrderingDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigOrderingDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigOrderingDeleteRequestValidationError{}
