// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: config.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ConfigAnchorListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigAnchorListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigAnchorListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigAnchorListRequestMultiError, or nil if none found.
func (m *ConfigAnchorListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigAnchorListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChannelName

	if len(errors) > 0 {
		return ConfigAnchorListRequestMultiError(errors)
	}

	return nil
}

// ConfigAnchorListRequestMultiError is an error wrapping multiple validation
// errors returned by ConfigAnchorListRequest.ValidateAll() if the designated
// constraints aren't met.
type ConfigAnchorListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigAnchorListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigAnchorListRequestMultiError) AllErrors() []error { return m }

// ConfigAnchorListRequestValidationError is the validation error returned by
// ConfigAnchorListRequest.Validate if the designated constraints aren't met.
type ConfigAnchorListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigAnchorListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigAnchorListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigAnchorListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigAnchorListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigAnchorListRequestValidationError) ErrorName() string {
	return "ConfigAnchorListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigAnchorListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigAnchorListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigAnchorListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigAnchorListRequestValidationError{}

// Validate checks the field values on ConfigAnchorListResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigAnchorListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigAnchorListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigAnchorListResponseMultiError, or nil if none found.
func (m *ConfigAnchorListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigAnchorListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigAnchorListResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigAnchorListResponseValidationError{
						field:  fmt.Sprintf("Result[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigAnchorListResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ConfigAnchorListResponseMultiError(errors)
	}

	return nil
}

// ConfigAnchorListResponseMultiError is an error wrapping multiple validation
// errors returned by ConfigAnchorListResponse.ValidateAll() if the designated
// constraints aren't met.
type ConfigAnchorListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigAnchorListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigAnchorListResponseMultiError) AllErrors() []error { return m }

// ConfigAnchorListResponseValidationError is the validation error returned by
// ConfigAnchorListResponse.Validate if the designated constraints aren't met.
type ConfigAnchorListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigAnchorListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigAnchorListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigAnchorListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigAnchorListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigAnchorListResponseValidationError) ErrorName() string {
	return "ConfigAnchorListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigAnchorListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigAnchorListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigAnchorListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigAnchorListResponseValidationError{}

// Validate checks the field values on ConfigAnchorModifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigAnchorModifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigAnchorModifyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigAnchorModifyRequestMultiError, or nil if none found.
func (m *ConfigAnchorModifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigAnchorModifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChannelName

	if all {
		switch v := interface{}(m.GetOrderer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigAnchorModifyRequestValidationError{
					field:  "Orderer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigAnchorModifyRequestValidationError{
					field:  "Orderer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrderer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigAnchorModifyRequestValidationError{
				field:  "Orderer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetPeers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigAnchorModifyRequestValidationError{
						field:  fmt.Sprintf("Peers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigAnchorModifyRequestValidationError{
						field:  fmt.Sprintf("Peers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigAnchorModifyRequestValidationError{
					field:  fmt.Sprintf("Peers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ConfigAnchorModifyRequestMultiError(errors)
	}

	return nil
}

// ConfigAnchorModifyRequestMultiError is an error wrapping multiple validation
// errors returned by ConfigAnchorModifyRequest.ValidateAll() if the
// designated constraints aren't met.
type ConfigAnchorModifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigAnchorModifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigAnchorModifyRequestMultiError) AllErrors() []error { return m }

// ConfigAnchorModifyRequestValidationError is the validation error returned by
// ConfigAnchorModifyRequest.Validate if the designated constraints aren't met.
type ConfigAnchorModifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigAnchorModifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigAnchorModifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigAnchorModifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigAnchorModifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigAnchorModifyRequestValidationError) ErrorName() string {
	return "ConfigAnchorModifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigAnchorModifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigAnchorModifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigAnchorModifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigAnchorModifyRequestValidationError{}

// Validate checks the field values on ConfigAnchorModifyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigAnchorModifyResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigAnchorModifyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigAnchorModifyResponseMultiError, or nil if none found.
func (m *ConfigAnchorModifyResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigAnchorModifyResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetNew() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigAnchorModifyResponseValidationError{
						field:  fmt.Sprintf("New[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigAnchorModifyResponseValidationError{
						field:  fmt.Sprintf("New[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigAnchorModifyResponseValidationError{
					field:  fmt.Sprintf("New[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetExisted() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigAnchorModifyResponseValidationError{
						field:  fmt.Sprintf("Existed[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigAnchorModifyResponseValidationError{
						field:  fmt.Sprintf("Existed[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigAnchorModifyResponseValidationError{
					field:  fmt.Sprintf("Existed[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDeleted() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigAnchorModifyResponseValidationError{
						field:  fmt.Sprintf("Deleted[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigAnchorModifyResponseValidationError{
						field:  fmt.Sprintf("Deleted[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigAnchorModifyResponseValidationError{
					field:  fmt.Sprintf("Deleted[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ConfigAnchorModifyResponseMultiError(errors)
	}

	return nil
}

// ConfigAnchorModifyResponseMultiError is an error wrapping multiple
// validation errors returned by ConfigAnchorModifyResponse.ValidateAll() if
// the designated constraints aren't met.
type ConfigAnchorModifyResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigAnchorModifyResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigAnchorModifyResponseMultiError) AllErrors() []error { return m }

// ConfigAnchorModifyResponseValidationError is the validation error returned
// by ConfigAnchorModifyResponse.Validate if the designated constraints aren't met.
type ConfigAnchorModifyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigAnchorModifyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigAnchorModifyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigAnchorModifyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigAnchorModifyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigAnchorModifyResponseValidationError) ErrorName() string {
	return "ConfigAnchorModifyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigAnchorModifyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigAnchorModifyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigAnchorModifyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigAnchorModifyResponseValidationError{}

// Validate checks the field values on ConfigOrderingListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigOrderingListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigOrderingListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigOrderingListRequestMultiError, or nil if none found.
func (m *ConfigOrderingListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigOrderingListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChannelName

	if len(errors) > 0 {
		return ConfigOrderingListRequestMultiError(errors)
	}

	return nil
}

// ConfigOrderingListRequestMultiError is an error wrapping multiple validation
// errors returned by ConfigOrderingListRequest.ValidateAll() if the
// designated constraints aren't met.
type ConfigOrderingListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigOrderingListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigOrderingListRequestMultiError) AllErrors() []error { return m }

// ConfigOrderingListRequestValidationError is the validation error returned by
// ConfigOrderingListRequest.Validate if the designated constraints aren't met.
type ConfigOrderingListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigOrderingListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigOrderingListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigOrderingListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigOrderingListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigOrderingListRequestValidationError) ErrorName() string {
	return "ConfigOrderingListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigOrderingListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigOrderingListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigOrderingListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigOrderingListRequestValidationError{}

// Validate checks the field values on ConfigOrderingListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigOrderingListResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigOrderingListResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigOrderingListResponseMultiError, or nil if none found.
func (m *ConfigOrderingListResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigOrderingListResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrderers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConfigOrderingListResponseValidationError{
						field:  fmt.Sprintf("Orderers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConfigOrderingListResponseValidationError{
						field:  fmt.Sprintf("Orderers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConfigOrderingListResponseValidationError{
					field:  fmt.Sprintf("Orderers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Consensus

	if len(errors) > 0 {
		return ConfigOrderingListResponseMultiError(errors)
	}

	return nil
}

// ConfigOrderingListResponseMultiError is an error wrapping multiple
// validation errors returned by ConfigOrderingListResponse.ValidateAll() if
// the designated constraints aren't met.
type ConfigOrderingListResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigOrderingListResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigOrderingListResponseMultiError) AllErrors() []error { return m }

// ConfigOrderingListResponseValidationError is the validation error returned
// by ConfigOrderingListResponse.Validate if the designated constraints aren't met.
type ConfigOrderingListResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigOrderingListResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigOrderingListResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigOrderingListResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigOrderingListResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigOrderingListResponseValidationError) ErrorName() string {
	return "ConfigOrderingListResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigOrderingListResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigOrderingListResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigOrderingListResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigOrderingListResponseValidationError{}

// Validate checks the field values on ConfigOrderingAddRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigOrderingAddRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigOrderingAddRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigOrderingAddRequestMultiError, or nil if none found.
func (m *ConfigOrderingAddRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigOrderingAddRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChannelName

	if all {
		switch v := interface{}(m.GetOrderer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigOrderingAddRequestValidationError{
					field:  "Orderer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigOrderingAddRequestValidationError{
					field:  "Orderer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrderer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigOrderingAddRequestValidationError{
				field:  "Orderer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConfigOrderingAddRequestMultiError(errors)
	}

	return nil
}

// ConfigOrderingAddRequestMultiError is an error wrapping multiple validation
// errors returned by ConfigOrderingAddRequest.ValidateAll() if the designated
// constraints aren't met.
type ConfigOrderingAddRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigOrderingAddRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigOrderingAddRequestMultiError) AllErrors() []error { return m }

// ConfigOrderingAddRequestValidationError is the validation error returned by
// ConfigOrderingAddRequest.Validate if the designated constraints aren't met.
type ConfigOrderingAddRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigOrderingAddRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigOrderingAddRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigOrderingAddRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigOrderingAddRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigOrderingAddRequestValidationError) ErrorName() string {
	return "ConfigOrderingAddRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigOrderingAddRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigOrderingAddRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigOrderingAddRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigOrderingAddRequestValidationError{}

// Validate checks the field values on ConfigOrderingAddResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigOrderingAddResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigOrderingAddResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigOrderingAddResponseMultiError, or nil if none found.
func (m *ConfigOrderingAddResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigOrderingAddResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ConfigOrderingAddResponseMultiError(errors)
	}

	return nil
}

// ConfigOrderingAddResponseMultiError is an error wrapping multiple validation
// errors returned by ConfigOrderingAddResponse.ValidateAll() if the
// designated constraints aren't met.
type ConfigOrderingAddResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigOrderingAddResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigOrderingAddResponseMultiError) AllErrors() []error { return m }

// ConfigOrderingAddResponseValidationError is the validation error returned by
// ConfigOrderingAddResponse.Validate if the designated constraints aren't met.
type ConfigOrderingAddResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigOrderingAddResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigOrderingAddResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigOrderingAddResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigOrderingAddResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigOrderingAddResponseValidationError) ErrorName() string {
	return "ConfigOrderingAddResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigOrderingAddResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigOrderingAddResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigOrderingAddResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigOrderingAddResponseValidationError{}

// Validate checks the field values on ConfigOrderingUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigOrderingUpdateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigOrderingUpdateRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigOrderingUpdateRequestMultiError, or nil if none found.
func (m *ConfigOrderingUpdateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigOrderingUpdateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChannelName

	if all {
		switch v := interface{}(m.GetOrderer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigOrderingUpdateRequestValidationError{
					field:  "Orderer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigOrderingUpdateRequestValidationError{
					field:  "Orderer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrderer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigOrderingUpdateRequestValidationError{
				field:  "Orderer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConfigOrderingUpdateRequestMultiError(errors)
	}

	return nil
}

// ConfigOrderingUpdateRequestMultiError is an error wrapping multiple
// validation errors returned by ConfigOrderingUpdateRequest.ValidateAll() if
// the designated constraints aren't met.
type ConfigOrderingUpdateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigOrderingUpdateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigOrderingUpdateRequestMultiError) AllErrors() []error { return m }

// ConfigOrderingUpdateRequestValidationError is the validation error returned
// by ConfigOrderingUpdateRequest.Validate if the designated constraints
// aren't met.
type ConfigOrderingUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigOrderingUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigOrderingUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigOrderingUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigOrderingUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigOrderingUpdateRequestValidationError) ErrorName() string {
	return "ConfigOrderingUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigOrderingUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigOrderingUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigOrderingUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigOrderingUpdateRequestValidationError{}

// Validate checks the field values on ConfigOrderingUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigOrderingUpdateResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigOrderingUpdateResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigOrderingUpdateResponseMultiError, or nil if none found.
func (m *ConfigOrderingUpdateResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigOrderingUpdateResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ConfigOrderingUpdateResponseMultiError(errors)
	}

	return nil
}

// ConfigOrderingUpdateResponseMultiError is an error wrapping multiple
// validation errors returned by ConfigOrderingUpdateResponse.ValidateAll() if
// the designated constraints aren't met.
type ConfigOrderingUpdateResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigOrderingUpdateResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigOrderingUpdateResponseMultiError) AllErrors() []error { return m }

// ConfigOrderingUpdateResponseValidationError is the validation error returned
// by ConfigOrderingUpdateResponse.Validate if the designated constraints
// aren't met.
type ConfigOrderingUpdateResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigOrderingUpdateResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigOrderingUpdateResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigOrderingUpdateResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigOrderingUpdateResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigOrderingUpdateResponseValidationError) ErrorName() string {
	return "ConfigOrderingUpdateResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigOrderingUpdateResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigOrderingUpdateResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigOrderingUpdateResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigOrderingUpdateResponseValidationError{}

// Validate checks the field values on ConfigOrderingDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigOrderingDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigOrderingDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigOrderingDeleteRequestMultiError, or nil if none found.
func (m *ConfigOrderingDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigOrderingDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChannelName

	if all {
		switch v := interface{}(m.GetOrderer()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigOrderingDeleteRequestValidationError{
					field:  "Orderer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigOrderingDeleteRequestValidationError{
					field:  "Orderer",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrderer()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigOrderingDeleteRequestValidationError{
				field:  "Orderer",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConfigOrderingDeleteRequestMultiError(errors)
	}

	return nil
}

// ConfigOrderingDeleteRequestMultiError is an error wrapping multiple
// validation errors returned by ConfigOrderingDeleteRequest.ValidateAll() if
// the designated constraints aren't met.
type ConfigOrderingDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigOrderingDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigOrderingDeleteRequestMultiError) AllErrors() []error { return m }

// ConfigOrderingDeleteRequestValidationError is the validation error returned
// by ConfigOrderingDeleteRequest.Validate if the designated constraints
// aren't met.
type ConfigOrderingDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigOrderingDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigOrderingDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigOrderingDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigOrderingDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigOrderingDeleteRequestValidationError) ErrorName() string {
	return "ConfigOrderingDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigOrderingDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigOrderingDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigOrderingDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigOrderingDeleteRequestValidationError{}

// Validate checks the field values on ConfigOrderingDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigOrderingDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigOrderingDeleteResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigOrderingDeleteResponseMultiError, or nil if none found.
func (m *ConfigOrderingDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigOrderingDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ConfigOrderingDeleteResponseMultiError(errors)
	}

	return nil
}

// ConfigOrderingDeleteResponseMultiError is an error wrapping multiple
// validation errors returned by ConfigOrderingDeleteResponse.ValidateAll() if
// the designated constraints aren't met.
type ConfigOrderingDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigOrderingDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigOrderingDeleteResponseMultiError) AllErrors() []error { return m }

// ConfigOrderingDeleteResponseValidationError is the validation error returned
// by ConfigOrderingDeleteResponse.Validate if the designated constraints
// aren't met.
type ConfigOrderingDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigOrderingDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigOrderingDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigOrderingDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigOrderingDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigOrderingDeleteResponseValidationError) ErrorName() string {
	return "ConfigOrderingDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigOrderingDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigOrderingDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigOrderingDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigOrderingDeleteResponseValidationError{}

// Validate checks the field values on ConfigSmartBFTGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigSmartBFTGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigSmartBFTGetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigSmartBFTGetRequestMultiError, or nil if none found.
func (m *ConfigSmartBFTGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigSmartBFTGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChannelName

	if len(errors) > 0 {
		return ConfigSmartBFTGetRequestMultiError(errors)
	}

	return nil
}

// ConfigSmartBFTGetRequestMultiError is an error wrapping multiple validation
// errors returned by ConfigSmartBFTGetRequest.ValidateAll() if the designated
// constraints aren't met.
type ConfigSmartBFTGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigSmartBFTGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigSmartBFTGetRequestMultiError) AllErrors() []error { return m }

// ConfigSmartBFTGetRequestValidationError is the validation error returned by
// ConfigSmartBFTGetRequest.Validate if the designated constraints aren't met.
type ConfigSmartBFTGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigSmartBFTGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigSmartBFTGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigSmartBFTGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigSmartBFTGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigSmartBFTGetRequestValidationError) ErrorName() string {
	return "ConfigSmartBFTGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigSmartBFTGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigSmartBFTGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigSmartBFTGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigSmartBFTGetRequestValidationError{}

// Validate checks the field values on ConfigSmartBFTGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigSmartBFTGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigSmartBFTGetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigSmartBFTGetResponseMultiError, or nil if none found.
func (m *ConfigSmartBFTGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigSmartBFTGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigSmartBFTGetResponseValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigSmartBFTGetResponseValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigSmartBFTGetResponseValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConfigSmartBFTGetResponseMultiError(errors)
	}

	return nil
}

// ConfigSmartBFTGetResponseMultiError is an error wrapping multiple validation
// errors returned by ConfigSmartBFTGetResponse.ValidateAll() if the
// designated constraints aren't met.
type ConfigSmartBFTGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigSmartBFTGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigSmartBFTGetResponseMultiError) AllErrors() []error { return m }

// ConfigSmartBFTGetResponseValidationError is the validation error returned by
// ConfigSmartBFTGetResponse.Validate if the designated constraints aren't met.
type ConfigSmartBFTGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigSmartBFTGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigSmartBFTGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigSmartBFTGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigSmartBFTGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigSmartBFTGetResponseValidationError) ErrorName() string {
	return "ConfigSmartBFTGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigSmartBFTGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigSmartBFTGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigSmartBFTGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigSmartBFTGetResponseValidationError{}

// Validate checks the field values on ConfigSmartBFTSetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigSmartBFTSetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigSmartBFTSetRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigSmartBFTSetRequestMultiError, or nil if none found.
func (m *ConfigSmartBFTSetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigSmartBFTSetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChannelName

	if all {
		switch v := interface{}(m.GetOptions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfigSmartBFTSetRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfigSmartBFTSetRequestValidationError{
					field:  "Options",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfigSmartBFTSetRequestValidationError{
				field:  "Options",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConfigSmartBFTSetRequestMultiError(errors)
	}

	return nil
}

// ConfigSmartBFTSetRequestMultiError is an error wrapping multiple validation
// errors returned by ConfigSmartBFTSetRequest.ValidateAll() if the designated
// constraints aren't met.
type ConfigSmartBFTSetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigSmartBFTSetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigSmartBFTSetRequestMultiError) AllErrors() []error { return m }

// ConfigSmartBFTSetRequestValidationError is the validation error returned by
// ConfigSmartBFTSetRequest.Validate if the designated constraints aren't met.
type ConfigSmartBFTSetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigSmartBFTSetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigSmartBFTSetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigSmartBFTSetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigSmartBFTSetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigSmartBFTSetRequestValidationError) ErrorName() string {
	return "ConfigSmartBFTSetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigSmartBFTSetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigSmartBFTSetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigSmartBFTSetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigSmartBFTSetRequestValidationError{}

// Validate checks the field values on ConfigSmartBFTSetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigSmartBFTSetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigSmartBFTSetResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigSmartBFTSetResponseMultiError, or nil if none found.
func (m *ConfigSmartBFTSetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigSmartBFTSetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ConfigSmartBFTSetResponseMultiError(errors)
	}

	return nil
}

// ConfigSmartBFTSetResponseMultiError is an error wrapping multiple validation
// errors returned by ConfigSmartBFTSetResponse.ValidateAll() if the
// designated constraints aren't met.
type ConfigSmartBFTSetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigSmartBFTSetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigSmartBFTSetResponseMultiError) AllErrors() []error { return m }

// ConfigSmartBFTSetResponseValidationError is the validation error returned by
// ConfigSmartBFTSetResponse.Validate if the designated constraints aren't met.
type ConfigSmartBFTSetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigSmartBFTSetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigSmartBFTSetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigSmartBFTSetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigSmartBFTSetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigSmartBFTSetResponseValidationError) ErrorName() string {
	return "ConfigSmartBFTSetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigSmartBFTSetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigSmartBFTSetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigSmartBFTSetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigSmartBFTSetResponseValidationError{}

// Validate checks the field values on ConfigOrganizationDeleteRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConfigOrganizationDeleteRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigOrganizationDeleteRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ConfigOrganizationDeleteRequestMultiError, or nil if none found.
func (m *ConfigOrganizationDeleteRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigOrganizationDeleteRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChannelName

	// no validation rules for Organization

	// no validation rules for Section

	if len(errors) > 0 {
		return ConfigOrganizationDeleteRequestMultiError(errors)
	}

	return nil
}

// ConfigOrganizationDeleteRequestMultiError is an error wrapping multiple
// validation errors returned by ConfigOrganizationDeleteRequest.ValidateAll()
// if the designated constraints aren't met.
type ConfigOrganizationDeleteRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigOrganizationDeleteRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigOrganizationDeleteRequestMultiError) AllErrors() []error { return m }

// ConfigOrganizationDeleteRequestValidationError is the validation error
// returned by ConfigOrganizationDeleteRequest.Validate if the designated
// constraints aren't met.
type ConfigOrganizationDeleteRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigOrganizationDeleteRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigOrganizationDeleteRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigOrganizationDeleteRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigOrganizationDeleteRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigOrganizationDeleteRequestValidationError) ErrorName() string {
	return "ConfigOrganizationDeleteRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigOrganizationDeleteRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigOrganizationDeleteRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigOrganizationDeleteRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigOrganizationDeleteRequestValidationError{}

// Validate checks the field values on ConfigOrganizationDeleteResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ConfigOrganizationDeleteResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigOrganizationDeleteResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ConfigOrganizationDeleteResponseMultiError, or nil if none found.
func (m *ConfigOrganizationDeleteResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigOrganizationDeleteResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Existed

	if len(errors) > 0 {
		return ConfigOrganizationDeleteResponseMultiError(errors)
	}

	return nil
}

// ConfigOrganizationDeleteResponseMultiError is an error wrapping multiple
// validation errors returned by
// ConfigOrganizationDeleteResponse.ValidateAll() if the designated
// constraints aren't met.
type ConfigOrganizationDeleteResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigOrganizationDeleteResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigOrganizationDeleteResponseMultiError) AllErrors() []error { return m }

// ConfigOrganizationDeleteResponseValidationError is the validation error
// returned by ConfigOrganizationDeleteResponse.Validate if the designated
// constraints aren't met.
type ConfigOrganizationDeleteResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigOrganizationDeleteResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigOrganizationDeleteResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigOrganizationDeleteResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigOrganizationDeleteResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigOrganizationDeleteResponseValidationError) ErrorName() string {
	return "ConfigOrganizationDeleteResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigOrganizationDeleteResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigOrganizationDeleteResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigOrganizationDeleteResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigOrganizationDeleteResponseValidationError{}

// Validate checks the field values on ConfigGetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ConfigGetRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigGetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigGetRequestMultiError, or nil if none found.
func (m *ConfigGetRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigGetRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChannelName

	if len(errors) > 0 {
		return ConfigGetRequestMultiError(errors)
	}

	return nil
}

// ConfigGetRequestMultiError is an error wrapping multiple validation errors
// returned by ConfigGetRequest.ValidateAll() if the designated constraints
// aren't met.
type ConfigGetRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigGetRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigGetRequestMultiError) AllErrors() []error { return m }

// ConfigGetRequestValidationError is the validation error returned by
// ConfigGetRequest.Validate if the designated constraints aren't met.
type ConfigGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigGetRequestValidationError) ErrorName() string { return "ConfigGetRequestValidationError" }

// Error satisfies the builtin error interface
func (e ConfigGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigGetRequestValidationError{}

// Validate checks the field values on ConfigGetResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ConfigGetResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConfigGetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConfigGetResponseMultiError, or nil if none found.
func (m *ConfigGetResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConfigGetResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Config

	if len(errors) > 0 {
		return ConfigGetResponseMultiError(errors)
	}

	return nil
}

// ConfigGetResponseMultiError is an error wrapping multiple validation errors
// returned by ConfigGetResponse.ValidateAll() if the designated constraints
// aren't met.
type ConfigGetResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfigGetResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfigGetResponseMultiError) AllErrors() []error { return m }

// ConfigGetResponseValidationError is the validation error returned by
// ConfigGetResponse.Validate if the designated constraints aren't met.
type ConfigGetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfigGetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfigGetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfigGetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfigGetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfigGetResponseValidationError) ErrorName() string {
	return "ConfigGetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ConfigGetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConfigGetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfigGetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfigGetResponseValidationError{}
