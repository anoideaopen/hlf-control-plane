// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: lifecycle.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on LifecycleChaincode with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LifecycleChaincode) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LifecycleChaincode with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LifecycleChaincodeMultiError, or nil if none found.
func (m *LifecycleChaincode) ValidateAll() error {
	return m.validate(true)
}

func (m *LifecycleChaincode) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Sequence

	// no validation rules for Version

	// no validation rules for InitRequired

	if len(errors) > 0 {
		return LifecycleChaincodeMultiError(errors)
	}

	return nil
}

// LifecycleChaincodeMultiError is an error wrapping multiple validation errors
// returned by LifecycleChaincode.ValidateAll() if the designated constraints
// aren't met.
type LifecycleChaincodeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LifecycleChaincodeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LifecycleChaincodeMultiError) AllErrors() []error { return m }

// LifecycleChaincodeValidationError is the validation error returned by
// LifecycleChaincode.Validate if the designated constraints aren't met.
type LifecycleChaincodeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LifecycleChaincodeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LifecycleChaincodeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LifecycleChaincodeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LifecycleChaincodeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LifecycleChaincodeValidationError) ErrorName() string {
	return "LifecycleChaincodeValidationError"
}

// Error satisfies the builtin error interface
func (e LifecycleChaincodeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLifecycleChaincode.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LifecycleChaincodeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LifecycleChaincodeValidationError{}

// Validate checks the field values on LifecycleStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LifecycleStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LifecycleStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LifecycleStatusRequestMultiError, or nil if none found.
func (m *LifecycleStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LifecycleStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChannelName

	if len(errors) > 0 {
		return LifecycleStatusRequestMultiError(errors)
	}

	return nil
}

// LifecycleStatusRequestMultiError is an error wrapping multiple validation
// errors returned by LifecycleStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type LifecycleStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LifecycleStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LifecycleStatusRequestMultiError) AllErrors() []error { return m }

// LifecycleStatusRequestValidationError is the validation error returned by
// LifecycleStatusRequest.Validate if the designated constraints aren't met.
type LifecycleStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LifecycleStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LifecycleStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LifecycleStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LifecycleStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LifecycleStatusRequestValidationError) ErrorName() string {
	return "LifecycleStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LifecycleStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLifecycleStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LifecycleStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LifecycleStatusRequestValidationError{}

// Validate checks the field values on LifecycleStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LifecycleStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LifecycleStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LifecycleStatusResponseMultiError, or nil if none found.
func (m *LifecycleStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LifecycleStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetChaincodes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, LifecycleStatusResponseValidationError{
						field:  fmt.Sprintf("Chaincodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, LifecycleStatusResponseValidationError{
						field:  fmt.Sprintf("Chaincodes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return LifecycleStatusResponseValidationError{
					field:  fmt.Sprintf("Chaincodes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return LifecycleStatusResponseMultiError(errors)
	}

	return nil
}

// LifecycleStatusResponseMultiError is an error wrapping multiple validation
// errors returned by LifecycleStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type LifecycleStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LifecycleStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LifecycleStatusResponseMultiError) AllErrors() []error { return m }

// LifecycleStatusResponseValidationError is the validation error returned by
// LifecycleStatusResponse.Validate if the designated constraints aren't met.
type LifecycleStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LifecycleStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LifecycleStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LifecycleStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LifecycleStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LifecycleStatusResponseValidationError) ErrorName() string {
	return "LifecycleStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LifecycleStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLifecycleStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LifecycleStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LifecycleStatusResponseValidationError{}

// Validate checks the field values on LifecycleFullRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LifecycleFullRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LifecycleFullRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LifecycleFullRequestMultiError, or nil if none found.
func (m *LifecycleFullRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LifecycleFullRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChannelName

	// no validation rules for ChaincodeName

	// no validation rules for ChaincodeLabel

	// no validation rules for Policy

	// no validation rules for Version

	// no validation rules for InitRequired

	// no validation rules for CommitForce

	if len(errors) > 0 {
		return LifecycleFullRequestMultiError(errors)
	}

	return nil
}

// LifecycleFullRequestMultiError is an error wrapping multiple validation
// errors returned by LifecycleFullRequest.ValidateAll() if the designated
// constraints aren't met.
type LifecycleFullRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LifecycleFullRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LifecycleFullRequestMultiError) AllErrors() []error { return m }

// LifecycleFullRequestValidationError is the validation error returned by
// LifecycleFullRequest.Validate if the designated constraints aren't met.
type LifecycleFullRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LifecycleFullRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LifecycleFullRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LifecycleFullRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LifecycleFullRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LifecycleFullRequestValidationError) ErrorName() string {
	return "LifecycleFullRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LifecycleFullRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLifecycleFullRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LifecycleFullRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LifecycleFullRequestValidationError{}

// Validate checks the field values on LifecycleFullResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LifecycleFullResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LifecycleFullResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LifecycleFullResponseMultiError, or nil if none found.
func (m *LifecycleFullResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LifecycleFullResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Committed

	// no validation rules for Approvals

	if len(errors) > 0 {
		return LifecycleFullResponseMultiError(errors)
	}

	return nil
}

// LifecycleFullResponseMultiError is an error wrapping multiple validation
// errors returned by LifecycleFullResponse.ValidateAll() if the designated
// constraints aren't met.
type LifecycleFullResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LifecycleFullResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LifecycleFullResponseMultiError) AllErrors() []error { return m }

// LifecycleFullResponseValidationError is the validation error returned by
// LifecycleFullResponse.Validate if the designated constraints aren't met.
type LifecycleFullResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LifecycleFullResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LifecycleFullResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LifecycleFullResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LifecycleFullResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LifecycleFullResponseValidationError) ErrorName() string {
	return "LifecycleFullResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LifecycleFullResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLifecycleFullResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LifecycleFullResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LifecycleFullResponseValidationError{}

// Validate checks the field values on LifecycleApprovedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LifecycleApprovedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LifecycleApprovedRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LifecycleApprovedRequestMultiError, or nil if none found.
func (m *LifecycleApprovedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LifecycleApprovedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChannelName

	// no validation rules for ChaincodeName

	if len(errors) > 0 {
		return LifecycleApprovedRequestMultiError(errors)
	}

	return nil
}

// LifecycleApprovedRequestMultiError is an error wrapping multiple validation
// errors returned by LifecycleApprovedRequest.ValidateAll() if the designated
// constraints aren't met.
type LifecycleApprovedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LifecycleApprovedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LifecycleApprovedRequestMultiError) AllErrors() []error { return m }

// LifecycleApprovedRequestValidationError is the validation error returned by
// LifecycleApprovedRequest.Validate if the designated constraints aren't met.
type LifecycleApprovedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LifecycleApprovedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LifecycleApprovedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LifecycleApprovedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LifecycleApprovedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LifecycleApprovedRequestValidationError) ErrorName() string {
	return "LifecycleApprovedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LifecycleApprovedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLifecycleApprovedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LifecycleApprovedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LifecycleApprovedRequestValidationError{}

// Validate checks the field values on LifecycleApprovedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LifecycleApprovedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LifecycleApprovedResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LifecycleApprovedResponseMultiError, or nil if none found.
func (m *LifecycleApprovedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LifecycleApprovedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetChaincode()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LifecycleApprovedResponseValidationError{
					field:  "Chaincode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LifecycleApprovedResponseValidationError{
					field:  "Chaincode",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChaincode()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LifecycleApprovedResponseValidationError{
				field:  "Chaincode",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PackageId

	if len(errors) > 0 {
		return LifecycleApprovedResponseMultiError(errors)
	}

	return nil
}

// LifecycleApprovedResponseMultiError is an error wrapping multiple validation
// errors returned by LifecycleApprovedResponse.ValidateAll() if the
// designated constraints aren't met.
type LifecycleApprovedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LifecycleApprovedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LifecycleApprovedResponseMultiError) AllErrors() []error { return m }

// LifecycleApprovedResponseValidationError is the validation error returned by
// LifecycleApprovedResponse.Validate if the designated constraints aren't met.
type LifecycleApprovedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LifecycleApprovedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LifecycleApprovedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LifecycleApprovedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LifecycleApprovedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LifecycleApprovedResponseValidationError) ErrorName() string {
	return "LifecycleApprovedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LifecycleApprovedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLifecycleApprovedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LifecycleApprovedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LifecycleApprovedResponseValidationError{}

// Validate checks the field values on LifecycleCheckCommitReadinessRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *LifecycleCheckCommitReadinessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LifecycleCheckCommitReadinessRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// LifecycleCheckCommitReadinessRequestMultiError, or nil if none found.
func (m *LifecycleCheckCommitReadinessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LifecycleCheckCommitReadinessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sequence

	// no validation rules for ChannelName

	// no validation rules for ChaincodeName

	// no validation rules for Policy

	// no validation rules for Version

	// no validation rules for InitRequired

	if len(errors) > 0 {
		return LifecycleCheckCommitReadinessRequestMultiError(errors)
	}

	return nil
}

// LifecycleCheckCommitReadinessRequestMultiError is an error wrapping multiple
// validation errors returned by
// LifecycleCheckCommitReadinessRequest.ValidateAll() if the designated
// constraints aren't met.
type LifecycleCheckCommitReadinessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LifecycleCheckCommitReadinessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LifecycleCheckCommitReadinessRequestMultiError) AllErrors() []error { return m }

// LifecycleCheckCommitReadinessRequestValidationError is the validation error
// returned by LifecycleCheckCommitReadinessRequest.Validate if the designated
// constraints aren't met.
type LifecycleCheckCommitReadinessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LifecycleCheckCommitReadinessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LifecycleCheckCommitReadinessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LifecycleCheckCommitReadinessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LifecycleCheckCommitReadinessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LifecycleCheckCommitReadinessRequestValidationError) ErrorName() string {
	return "LifecycleCheckCommitReadinessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LifecycleCheckCommitReadinessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLifecycleCheckCommitReadinessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LifecycleCheckCommitReadinessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LifecycleCheckCommitReadinessRequestValidationError{}

// Validate checks the field values on LifecycleCheckCommitReadinessResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *LifecycleCheckCommitReadinessResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LifecycleCheckCommitReadinessResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// LifecycleCheckCommitReadinessResponseMultiError, or nil if none found.
func (m *LifecycleCheckCommitReadinessResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LifecycleCheckCommitReadinessResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Approvals

	if len(errors) > 0 {
		return LifecycleCheckCommitReadinessResponseMultiError(errors)
	}

	return nil
}

// LifecycleCheckCommitReadinessResponseMultiError is an error wrapping
// multiple validation errors returned by
// LifecycleCheckCommitReadinessResponse.ValidateAll() if the designated
// constraints aren't met.
type LifecycleCheckCommitReadinessResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LifecycleCheckCommitReadinessResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LifecycleCheckCommitReadinessResponseMultiError) AllErrors() []error { return m }

// LifecycleCheckCommitReadinessResponseValidationError is the validation error
// returned by LifecycleCheckCommitReadinessResponse.Validate if the
// designated constraints aren't met.
type LifecycleCheckCommitReadinessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LifecycleCheckCommitReadinessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LifecycleCheckCommitReadinessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LifecycleCheckCommitReadinessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LifecycleCheckCommitReadinessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LifecycleCheckCommitReadinessResponseValidationError) ErrorName() string {
	return "LifecycleCheckCommitReadinessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LifecycleCheckCommitReadinessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLifecycleCheckCommitReadinessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LifecycleCheckCommitReadinessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LifecycleCheckCommitReadinessResponseValidationError{}

// Validate checks the field values on LifecycleApproveForMyOrgRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LifecycleApproveForMyOrgRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LifecycleApproveForMyOrgRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// LifecycleApproveForMyOrgRequestMultiError, or nil if none found.
func (m *LifecycleApproveForMyOrgRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LifecycleApproveForMyOrgRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sequence

	// no validation rules for ChannelName

	// no validation rules for ChaincodeName

	// no validation rules for ChaincodeLabel

	// no validation rules for Policy

	// no validation rules for Version

	// no validation rules for InitRequired

	if len(errors) > 0 {
		return LifecycleApproveForMyOrgRequestMultiError(errors)
	}

	return nil
}

// LifecycleApproveForMyOrgRequestMultiError is an error wrapping multiple
// validation errors returned by LifecycleApproveForMyOrgRequest.ValidateAll()
// if the designated constraints aren't met.
type LifecycleApproveForMyOrgRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LifecycleApproveForMyOrgRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LifecycleApproveForMyOrgRequestMultiError) AllErrors() []error { return m }

// LifecycleApproveForMyOrgRequestValidationError is the validation error
// returned by LifecycleApproveForMyOrgRequest.Validate if the designated
// constraints aren't met.
type LifecycleApproveForMyOrgRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LifecycleApproveForMyOrgRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LifecycleApproveForMyOrgRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LifecycleApproveForMyOrgRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LifecycleApproveForMyOrgRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LifecycleApproveForMyOrgRequestValidationError) ErrorName() string {
	return "LifecycleApproveForMyOrgRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LifecycleApproveForMyOrgRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLifecycleApproveForMyOrgRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LifecycleApproveForMyOrgRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LifecycleApproveForMyOrgRequestValidationError{}

// Validate checks the field values on LifecycleApproveForMyOrgResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *LifecycleApproveForMyOrgResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LifecycleApproveForMyOrgResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// LifecycleApproveForMyOrgResponseMultiError, or nil if none found.
func (m *LifecycleApproveForMyOrgResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LifecycleApproveForMyOrgResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LifecycleApproveForMyOrgResponseMultiError(errors)
	}

	return nil
}

// LifecycleApproveForMyOrgResponseMultiError is an error wrapping multiple
// validation errors returned by
// LifecycleApproveForMyOrgResponse.ValidateAll() if the designated
// constraints aren't met.
type LifecycleApproveForMyOrgResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LifecycleApproveForMyOrgResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LifecycleApproveForMyOrgResponseMultiError) AllErrors() []error { return m }

// LifecycleApproveForMyOrgResponseValidationError is the validation error
// returned by LifecycleApproveForMyOrgResponse.Validate if the designated
// constraints aren't met.
type LifecycleApproveForMyOrgResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LifecycleApproveForMyOrgResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LifecycleApproveForMyOrgResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LifecycleApproveForMyOrgResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LifecycleApproveForMyOrgResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LifecycleApproveForMyOrgResponseValidationError) ErrorName() string {
	return "LifecycleApproveForMyOrgResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LifecycleApproveForMyOrgResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLifecycleApproveForMyOrgResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LifecycleApproveForMyOrgResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LifecycleApproveForMyOrgResponseValidationError{}

// Validate checks the field values on LifecycleCommitRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LifecycleCommitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LifecycleCommitRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LifecycleCommitRequestMultiError, or nil if none found.
func (m *LifecycleCommitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LifecycleCommitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sequence

	// no validation rules for ChannelName

	// no validation rules for ChaincodeName

	// no validation rules for Policy

	// no validation rules for Version

	// no validation rules for InitRequired

	if len(errors) > 0 {
		return LifecycleCommitRequestMultiError(errors)
	}

	return nil
}

// LifecycleCommitRequestMultiError is an error wrapping multiple validation
// errors returned by LifecycleCommitRequest.ValidateAll() if the designated
// constraints aren't met.
type LifecycleCommitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LifecycleCommitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LifecycleCommitRequestMultiError) AllErrors() []error { return m }

// LifecycleCommitRequestValidationError is the validation error returned by
// LifecycleCommitRequest.Validate if the designated constraints aren't met.
type LifecycleCommitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LifecycleCommitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LifecycleCommitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LifecycleCommitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LifecycleCommitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LifecycleCommitRequestValidationError) ErrorName() string {
	return "LifecycleCommitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LifecycleCommitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLifecycleCommitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LifecycleCommitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LifecycleCommitRequestValidationError{}

// Validate checks the field values on LifecycleCommitResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LifecycleCommitResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LifecycleCommitResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LifecycleCommitResponseMultiError, or nil if none found.
func (m *LifecycleCommitResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LifecycleCommitResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LifecycleCommitResponseMultiError(errors)
	}

	return nil
}

// LifecycleCommitResponseMultiError is an error wrapping multiple validation
// errors returned by LifecycleCommitResponse.ValidateAll() if the designated
// constraints aren't met.
type LifecycleCommitResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LifecycleCommitResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LifecycleCommitResponseMultiError) AllErrors() []error { return m }

// LifecycleCommitResponseValidationError is the validation error returned by
// LifecycleCommitResponse.Validate if the designated constraints aren't met.
type LifecycleCommitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LifecycleCommitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LifecycleCommitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LifecycleCommitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LifecycleCommitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LifecycleCommitResponseValidationError) ErrorName() string {
	return "LifecycleCommitResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LifecycleCommitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLifecycleCommitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LifecycleCommitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LifecycleCommitResponseValidationError{}

// Validate checks the field values on LifecycleInitRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LifecycleInitRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LifecycleInitRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LifecycleInitRequestMultiError, or nil if none found.
func (m *LifecycleInitRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LifecycleInitRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChannelName

	// no validation rules for ChaincodeName

	if len(errors) > 0 {
		return LifecycleInitRequestMultiError(errors)
	}

	return nil
}

// LifecycleInitRequestMultiError is an error wrapping multiple validation
// errors returned by LifecycleInitRequest.ValidateAll() if the designated
// constraints aren't met.
type LifecycleInitRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LifecycleInitRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LifecycleInitRequestMultiError) AllErrors() []error { return m }

// LifecycleInitRequestValidationError is the validation error returned by
// LifecycleInitRequest.Validate if the designated constraints aren't met.
type LifecycleInitRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LifecycleInitRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LifecycleInitRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LifecycleInitRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LifecycleInitRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LifecycleInitRequestValidationError) ErrorName() string {
	return "LifecycleInitRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LifecycleInitRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLifecycleInitRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LifecycleInitRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LifecycleInitRequestValidationError{}

// Validate checks the field values on LifecycleInitResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LifecycleInitResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LifecycleInitResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LifecycleInitResponseMultiError, or nil if none found.
func (m *LifecycleInitResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LifecycleInitResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LifecycleInitResponseMultiError(errors)
	}

	return nil
}

// LifecycleInitResponseMultiError is an error wrapping multiple validation
// errors returned by LifecycleInitResponse.ValidateAll() if the designated
// constraints aren't met.
type LifecycleInitResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LifecycleInitResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LifecycleInitResponseMultiError) AllErrors() []error { return m }

// LifecycleInitResponseValidationError is the validation error returned by
// LifecycleInitResponse.Validate if the designated constraints aren't met.
type LifecycleInitResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LifecycleInitResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LifecycleInitResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LifecycleInitResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LifecycleInitResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LifecycleInitResponseValidationError) ErrorName() string {
	return "LifecycleInitResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LifecycleInitResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLifecycleInitResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LifecycleInitResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LifecycleInitResponseValidationError{}
